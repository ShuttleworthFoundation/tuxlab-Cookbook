<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.4.2_06) on Thu Nov 24 12:17:50 GMT 2005 -->
<TITLE>
Controller
</TITLE>

<META NAME="keywords" CONTENT="com.icl.saxon.Controller class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="Controller";
}
</SCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../com/icl/saxon/Context.html" title="class in com.icl.saxon"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../com/icl/saxon/DecimalFormatManager.html" title="class in com.icl.saxon"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Controller.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.icl.saxon</FONT>
<BR>
Class Controller</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by"><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">javax.xml.transform.Transformer</A>
      <IMG SRC="../../../resources/inherit.gif" ALT="extended by"><B>com.icl.saxon.Controller</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../com/icl/saxon/sort/NodeOrderComparer.html" title="interface in com.icl.saxon.sort">NodeOrderComparer</A></DD>
</DL>
<HR>
<DL>
<DT>public class <B>Controller</B><DT>extends <A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A><DT>implements <A HREF="../../../com/icl/saxon/sort/NodeOrderComparer.html" title="interface in com.icl.saxon.sort">NodeOrderComparer</A></DL>

<P>
<B>Controller</B> processes an XML file, calling registered node handlers
 when appropriate to process its elements, character content, and attributes. <P>
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#DO_NOT_RECOVER">DO_NOT_RECOVER</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#RECOVER_SILENTLY">RECOVER_SILENTLY</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#RECOVER_WITH_WARNINGS">RECOVER_WITH_WARNINGS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#Controller()">Controller</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Default constructor is provided for Java-only programs, i.e.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected </CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#Controller(com.icl.saxon.TransformerFactoryImpl)">Controller</A></B>(<A HREF="../../../com/icl/saxon/TransformerFactoryImpl.html" title="class in com.icl.saxon">TransformerFactoryImpl</A>&nbsp;factory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a Controller and initialise variables.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#addTraceListener(com.icl.saxon.trace.TraceListener)">addTraceListener</A></B>(<A HREF="../../../com/icl/saxon/trace/TraceListener.html" title="interface in com.icl.saxon.trace">TraceListener</A>&nbsp;trace)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds the specified trace listener to receive trace events from
 this instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#applyImports(com.icl.saxon.Context, com.icl.saxon.Mode, int, int, com.icl.saxon.ParameterSet)">applyImports</A></B>(<A HREF="../../../com/icl/saxon/Context.html" title="class in com.icl.saxon">Context</A>&nbsp;c,
             <A HREF="../../../com/icl/saxon/Mode.html" title="class in com.icl.saxon">Mode</A>&nbsp;mode,
             int&nbsp;min,
             int&nbsp;max,
             <A HREF="../../../com/icl/saxon/ParameterSet.html" title="class in com.icl.saxon">ParameterSet</A>&nbsp;params)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apply a template imported from the stylesheet containing the current template</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#applyTemplates(com.icl.saxon.Context, com.icl.saxon.expr.Expression, com.icl.saxon.Mode, com.icl.saxon.ParameterSet)">applyTemplates</A></B>(<A HREF="../../../com/icl/saxon/Context.html" title="class in com.icl.saxon">Context</A>&nbsp;c,
               <A HREF="../../../com/icl/saxon/expr/Expression.html" title="class in com.icl.saxon.expr">Expression</A>&nbsp;select,
               <A HREF="../../../com/icl/saxon/Mode.html" title="class in com.icl.saxon">Mode</A>&nbsp;mode,
               <A HREF="../../../com/icl/saxon/ParameterSet.html" title="class in com.icl.saxon">ParameterSet</A>&nbsp;parameters)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ApplyTemplates to process selected nodes using the handlers registered for a particular
 mode.<br></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#changeOutputDestination(java.util.Properties, javax.xml.transform.Result)">changeOutputDestination</A></B>(java.util.Properties&nbsp;props,
                        <A HREF="../../../javax/xml/transform/Result.html" title="interface in javax.xml.transform">Result</A>&nbsp;result)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a new output destination, supplying the output format details.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#changeToTextOutputDestination(java.lang.StringBuffer)">changeToTextOutputDestination</A></B>(java.lang.StringBuffer&nbsp;buffer)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a simple StringBuffer output destination.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#clearDocumentPool()">clearDocumentPool</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clear the document pool.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#clearParameters()">clearParameters</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reset the parameters to a null list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#compare(com.icl.saxon.om.NodeInfo, com.icl.saxon.om.NodeInfo)">compare</A></B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;n1,
        <A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;n2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compare the position of two nodes in document order</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#disableWhitespaceStripping(boolean)">disableWhitespaceStripping</A></B>(boolean&nbsp;disable)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Disable whitespace stripping</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/Bindery.html" title="class in com.icl.saxon">Bindery</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getBindery()">getBindery</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the current bindery</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/DecimalFormatManager.html" title="class in com.icl.saxon">DecimalFormatManager</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getDecimalFormatManager()">getDecimalFormatManager</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/om/DocumentPool.html" title="class in com.icl.saxon.om">DocumentPool</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getDocumentPool()">getDocumentPool</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the document pool.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../javax/xml/transform/ErrorListener.html" title="interface in javax.xml.transform">ErrorListener</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getErrorListener()">getErrorListener</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the error listener</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/KeyManager.html" title="class in com.icl.saxon">KeyManager</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getKeyManager()">getKeyManager</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the KeyManager</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getMessageEmitter()">getMessageEmitter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the Emitter used for xsl:message output</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/om/NamePool.html" title="class in com.icl.saxon.om">NamePool</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getNamePool()">getNamePool</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the name pool in use</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Properties</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getOutputProperties()">getOutputProperties</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the output properties for the transformation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getOutputProperty(java.lang.String)">getOutputProperty</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the value of an output property</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/output/Outputter.html" title="class in com.icl.saxon.output">Outputter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getOutputter()">getOutputter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the current outputter</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getParameter(java.lang.String)">getParameter</A></B>(java.lang.String&nbsp;expandedName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get a parameter to the transformation</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getRecoveryPolicy()">getRecoveryPolicy</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the policy for handling recoverable errors</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/RuleManager.html" title="class in com.icl.saxon">RuleManager</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getRuleManager()">getRuleManager</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../javax/xml/transform/URIResolver.html" title="interface in javax.xml.transform">URIResolver</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getStandardURIResolver()">getStandardURIResolver</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the fallback URI resolver.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/trace/TraceListener.html" title="interface in com.icl.saxon.trace">TraceListener</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getTraceListener()">getTraceListener</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/TransformerFactoryImpl.html" title="class in com.icl.saxon">TransformerFactoryImpl</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getTransformerFactory()">getTransformerFactory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getTreeModel()">getTreeModel</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the tree model in use</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../javax/xml/transform/URIResolver.html" title="interface in javax.xml.transform">URIResolver</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getURIResolver()">getURIResolver</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the primary URI resolver.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#getUserData(com.icl.saxon.om.NodeInfo, java.lang.String)">getUserData</A></B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;node,
            java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the named user data property for the node</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#isLineNumbering()">isLineNumbering</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether line numbering is enabled</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#isTracing()">isTracing</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#isWhitespaceStrippingDisabled()">isWhitespaceStrippingDisabled</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine if whitespace stripping is disabled</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/om/Builder.html" title="class in com.icl.saxon.om">Builder</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#makeBuilder()">makeBuilder</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Make a builder for the selected tree model</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/Context.html" title="class in com.icl.saxon">Context</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#makeContext(com.icl.saxon.om.NodeInfo)">makeContext</A></B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;node)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new context with a given node as the current node and the only node in the current
 node list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#makeMessageEmitter()">makeMessageEmitter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Make an Emitter to be used for xsl:message output</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../com/icl/saxon/om/Stripper.html" title="class in com.icl.saxon.om">Stripper</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#makeStripper(com.icl.saxon.om.Builder)">makeStripper</A></B>(<A HREF="../../../com/icl/saxon/om/Builder.html" title="class in com.icl.saxon.om">Builder</A>&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#pauseTracing(boolean)">pauseTracing</A></B>(boolean&nbsp;pause)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#removeTraceListener(com.icl.saxon.trace.TraceListener)">removeTraceListener</A></B>(<A HREF="../../../com/icl/saxon/trace/TraceListener.html" title="interface in com.icl.saxon.trace">TraceListener</A>&nbsp;trace)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the specified trace listener so that the next invocation
 of the render method will not send trace events to the listener.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#reportRecoverableError(java.lang.String, javax.xml.transform.SourceLocator)">reportRecoverableError</A></B>(java.lang.String&nbsp;message,
                       <A HREF="../../../javax/xml/transform/SourceLocator.html" title="interface in javax.xml.transform">SourceLocator</A>&nbsp;location)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report a recoverable error</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#reportRecoverableError(javax.xml.transform.TransformerException)">reportRecoverableError</A></B>(<A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A>&nbsp;err)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report a recoverable error</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#reset()">reset</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reset this <code>Transformer</code> to its original configuration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#resetOutputDestination(com.icl.saxon.output.Outputter)">resetOutputDestination</A></B>(<A HREF="../../../com/icl/saxon/output/Outputter.html" title="class in com.icl.saxon.output">Outputter</A>&nbsp;outputter)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close the current outputter, and revert to the previous outputter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#run(com.icl.saxon.om.NodeInfo)">run</A></B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;node)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Process a Document.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setDecimalFormatManager(com.icl.saxon.DecimalFormatManager)">setDecimalFormatManager</A></B>(<A HREF="../../../com/icl/saxon/DecimalFormatManager.html" title="class in com.icl.saxon">DecimalFormatManager</A>&nbsp;manager)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setDiagnosticName(java.lang.String)">setDiagnosticName</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a diagnostic name for this transformation (accessible through toString())</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setErrorListener(javax.xml.transform.ErrorListener)">setErrorListener</A></B>(<A HREF="../../../javax/xml/transform/ErrorListener.html" title="interface in javax.xml.transform">ErrorListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the error listener</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setLineNumbering(boolean)">setLineNumbering</A></B>(boolean&nbsp;onOrOff)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set line numbering (of the source document) on or off</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setMessageEmitter(com.icl.saxon.output.Emitter)">setMessageEmitter</A></B>(<A HREF="../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A>&nbsp;emitter)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the Emitter to be used for xsl:message output</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setNamePool(com.icl.saxon.om.NamePool)">setNamePool</A></B>(<A HREF="../../../com/icl/saxon/om/NamePool.html" title="class in com.icl.saxon.om">NamePool</A>&nbsp;pool)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the name pool to be used</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setOutputProperties(java.util.Properties)">setOutputProperties</A></B>(java.util.Properties&nbsp;properties)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the output properties for the transformation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setOutputProperty(java.lang.String, java.lang.String)">setOutputProperty</A></B>(java.lang.String&nbsp;name,
                  java.lang.String&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set an output property for the transformation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setParameter(java.lang.String, java.lang.Object)">setParameter</A></B>(java.lang.String&nbsp;expandedName,
             java.lang.Object&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a parameter for the transformation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setParams(com.icl.saxon.ParameterSet)">setParams</A></B>(<A HREF="../../../com/icl/saxon/ParameterSet.html" title="class in com.icl.saxon">ParameterSet</A>&nbsp;params)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set parameters supplied externally (typically, on the command line).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setPreparedStyleSheet(com.icl.saxon.PreparedStyleSheet)">setPreparedStyleSheet</A></B>(<A HREF="../../../com/icl/saxon/PreparedStyleSheet.html" title="class in com.icl.saxon">PreparedStyleSheet</A>&nbsp;sheet)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Associate this Controller with a compiled stylesheet</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setRecoveryPolicy(int)">setRecoveryPolicy</A></B>(int&nbsp;policy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the policy for handling recoverable errors</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setRuleManager(com.icl.saxon.RuleManager)">setRuleManager</A></B>(<A HREF="../../../com/icl/saxon/RuleManager.html" title="class in com.icl.saxon">RuleManager</A>&nbsp;r)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setTraceListener(com.icl.saxon.trace.TraceListener)">setTraceListener</A></B>(<A HREF="../../../com/icl/saxon/trace/TraceListener.html" title="interface in com.icl.saxon.trace">TraceListener</A>&nbsp;trace)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setTreeModel(int)">setTreeModel</A></B>(int&nbsp;model)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the tree data model to use</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setURIResolver(javax.xml.transform.URIResolver)">setURIResolver</A></B>(<A HREF="../../../javax/xml/transform/URIResolver.html" title="interface in javax.xml.transform">URIResolver</A>&nbsp;resolver)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set an object that will be used to resolve URIs used in
 document(), etc.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#setUserData(com.icl.saxon.om.NodeInfo, java.lang.String, java.lang.Object)">setUserData</A></B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;node,
            java.lang.String&nbsp;name,
            java.lang.Object&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set a user data property for a node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#toString()">toString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#transform(javax.xml.transform.Source, javax.xml.transform.Result)">transform</A></B>(<A HREF="../../../javax/xml/transform/Source.html" title="interface in javax.xml.transform">Source</A>&nbsp;source,
          <A HREF="../../../javax/xml/transform/Result.html" title="interface in javax.xml.transform">Result</A>&nbsp;result)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Process the source tree to SAX parse events.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#transformDocument(com.icl.saxon.om.NodeInfo, javax.xml.transform.Result)">transformDocument</A></B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;startNode,
                  <A HREF="../../../javax/xml/transform/Result.html" title="interface in javax.xml.transform">Result</A>&nbsp;result)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Render a source XML document supplied as a tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/icl/saxon/Controller.html#usesPreviewMode()">usesPreviewMode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Does this transformation use preview mode?</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="RECOVER_SILENTLY"><!-- --></A><H3>
RECOVER_SILENTLY</H3>
<PRE>
public static final int <B>RECOVER_SILENTLY</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#com.icl.saxon.Controller.RECOVER_SILENTLY">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="RECOVER_WITH_WARNINGS"><!-- --></A><H3>
RECOVER_WITH_WARNINGS</H3>
<PRE>
public static final int <B>RECOVER_WITH_WARNINGS</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#com.icl.saxon.Controller.RECOVER_WITH_WARNINGS">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="DO_NOT_RECOVER"><!-- --></A><H3>
DO_NOT_RECOVER</H3>
<PRE>
public static final int <B>DO_NOT_RECOVER</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#com.icl.saxon.Controller.DO_NOT_RECOVER">Constant Field Values</A></DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="Controller()"><!-- --></A><H3>
Controller</H3>
<PRE>
public <B>Controller</B>()</PRE>
<DL>
<DD>Default constructor is provided for Java-only programs, i.e. applications
 that use the RuleManager to set up Java handlers for nodes, without using
 a stylesheet
<P>
</DL>
<HR>

<A NAME="Controller(com.icl.saxon.TransformerFactoryImpl)"><!-- --></A><H3>
Controller</H3>
<PRE>
protected <B>Controller</B>(<A HREF="../../../com/icl/saxon/TransformerFactoryImpl.html" title="class in com.icl.saxon">TransformerFactoryImpl</A>&nbsp;factory)</PRE>
<DL>
<DD>Create a Controller and initialise variables. Constructor is protected,
 the Controller should be created using newTransformer() in the PreparedStyleSheet
 class.
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="reset()"><!-- --></A><H3>
reset</H3>
<PRE>
public void <B>reset</B>()</PRE>
<DL>
<DD><p>Reset this <code>Transformer</code> to its original configuration.</p>
 <p/>
 <p><code>Transformer</code> is reset to the same state as when it was created with
 <A HREF="../../../javax/xml/transform/TransformerFactory.html#newTransformer()"><CODE>TransformerFactory.newTransformer()</CODE></A>,
 <A HREF="../../../javax/xml/transform/TransformerFactory.html#newTransformer(javax.xml.transform.Source)"><CODE>TransformerFactory.newTransformer(javax.xml.transform.Source source)</CODE></A> or
 <A HREF="../../../javax/xml/transform/Templates.html#newTransformer()"><CODE>Templates.newTransformer()</CODE></A>.
 <code>reset()</code> is designed to allow the reuse of existing <code>Transformer</code>s
 thus saving resources associated with the creation of new <code>Transformer</code>s.</p>
 <p/>
 <p>The reset <code>Transformer</code> is not guaranteed to have the same <A HREF="../../../javax/xml/transform/URIResolver.html" title="interface in javax.xml.transform"><CODE>URIResolver</CODE></A>
 or <A HREF="../../../javax/xml/transform/ErrorListener.html" title="interface in javax.xml.transform"><CODE>ErrorListener</CODE></A> <code>Object</code>s, e.g. <CODE>Object.equals(Object obj)</CODE>.
 It is guaranteed to have a functionally equal <code>URIResolver</code>
 and <code>ErrorListener</code>.</p>

 <p>NOTE: the Saxon implementation of this method does not clear the document pool. This is because the
 reason for resetting an existing Transformer rather than creating a new one is to reuse resources, and
 the document pool is the most important resource held by the Transformer. If there is a requirement to
 clear the document pool, then it is possible either (a) to call the <A HREF="../../../com/icl/saxon/Controller.html#clearDocumentPool()"><CODE>clearDocumentPool()</CODE></A> method,
 or (b) to create a new Transformer.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#reset()">reset</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>1.5</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTransformerFactory()"><!-- --></A><H3>
getTransformerFactory</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/TransformerFactoryImpl.html" title="class in com.icl.saxon">TransformerFactoryImpl</A> <B>getTransformerFactory</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setDiagnosticName(java.lang.String)"><!-- --></A><H3>
setDiagnosticName</H3>
<PRE>
public void <B>setDiagnosticName</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Set a diagnostic name for this transformation (accessible through toString())
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="toString()"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="run(com.icl.saxon.om.NodeInfo)"><!-- --></A><H3>
run</H3>
<PRE>
public void <B>run</B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;node)
         throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Process a Document.<p>
 This method is intended for use when performing a pure Java transformation,
 without a stylesheet. Where there is an XSLT stylesheet, use transformDocument()
 or transform() instead: those methods set up information from the stylesheet before calling
 run(). <p>
 The process starts by calling the registered node
 handler to process the supplied node. Note that the same document can be processed
 any number of times, typically with different node handlers for each pass. The NodeInfo
 will typically be the root of a tree built using com.icl.saxon.om.Builder.<p>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="applyTemplates(com.icl.saxon.Context, com.icl.saxon.expr.Expression, com.icl.saxon.Mode, com.icl.saxon.ParameterSet)"><!-- --></A><H3>
applyTemplates</H3>
<PRE>
public void <B>applyTemplates</B>(<A HREF="../../../com/icl/saxon/Context.html" title="class in com.icl.saxon">Context</A>&nbsp;c,
                           <A HREF="../../../com/icl/saxon/expr/Expression.html" title="class in com.icl.saxon.expr">Expression</A>&nbsp;select,
                           <A HREF="../../../com/icl/saxon/Mode.html" title="class in com.icl.saxon">Mode</A>&nbsp;mode,
                           <A HREF="../../../com/icl/saxon/ParameterSet.html" title="class in com.icl.saxon">ParameterSet</A>&nbsp;parameters)
                    throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>ApplyTemplates to process selected nodes using the handlers registered for a particular
 mode.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>select</CODE> - A node-set expression (or more accurately a node-list)
 that determines which nodes are selected.
 Note: if the nodes are to be sorted, the select Expression will take care of this.<DD><CODE>mode</CODE> - Identifies the processing mode. It should match the mode defined when the
 element handler was registered using setHandler with a mode parameter. Set this parameter to
 null to invoke the default mode.<DD><CODE>parameters</CODE> - A ParameterSet containing the parameters to the handler/template being invoked.
 Specify null if there are no parameters.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="applyImports(com.icl.saxon.Context, com.icl.saxon.Mode, int, int, com.icl.saxon.ParameterSet)"><!-- --></A><H3>
applyImports</H3>
<PRE>
public void <B>applyImports</B>(<A HREF="../../../com/icl/saxon/Context.html" title="class in com.icl.saxon">Context</A>&nbsp;c,
                         <A HREF="../../../com/icl/saxon/Mode.html" title="class in com.icl.saxon">Mode</A>&nbsp;mode,
                         int&nbsp;min,
                         int&nbsp;max,
                         <A HREF="../../../com/icl/saxon/ParameterSet.html" title="class in com.icl.saxon">ParameterSet</A>&nbsp;params)
                  throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Apply a template imported from the stylesheet containing the current template
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="compare(com.icl.saxon.om.NodeInfo, com.icl.saxon.om.NodeInfo)"><!-- --></A><H3>
compare</H3>
<PRE>
public int <B>compare</B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;n1,
                   <A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;n2)</PRE>
<DL>
<DD>Compare the position of two nodes in document order
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../com/icl/saxon/sort/NodeOrderComparer.html#compare(com.icl.saxon.om.NodeInfo, com.icl.saxon.om.NodeInfo)">compare</A></CODE> in interface <CODE><A HREF="../../../com/icl/saxon/sort/NodeOrderComparer.html" title="interface in com.icl.saxon.sort">NodeOrderComparer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n1</CODE> - The first node<DD><CODE>n2</CODE> - The second node
<DT><B>Returns:</B><DD><0 if the first node is first in document order; >0 if
 the second node comes first in document order; 0 if the two parameters
 identify the same node</DL>
</DD>
</DL>
<HR>

<A NAME="setOutputProperties(java.util.Properties)"><!-- --></A><H3>
setOutputProperties</H3>
<PRE>
public void <B>setOutputProperties</B>(java.util.Properties&nbsp;properties)</PRE>
<DL>
<DD>Set the output properties for the transformation.  These
 properties will override properties set in the templates
 with xsl:output.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#setOutputProperties(java.util.Properties)">setOutputProperties</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>properties</CODE> - A set of output properties that will be
 used to override any of the same properties in affect
 for the transformation.<DT><B>See Also:</B><DD><A HREF="../../../javax/xml/transform/OutputKeys.html" title="class in javax.xml.transform"><CODE>OutputKeys</CODE></A>, 
<CODE>Properties</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getOutputProperties()"><!-- --></A><H3>
getOutputProperties</H3>
<PRE>
public java.util.Properties <B>getOutputProperties</B>()</PRE>
<DL>
<DD>Get the output properties for the transformation.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#getOutputProperties()">getOutputProperties</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>A copy of the set of output properties in effect for
   the next transformation.<DT><B>See Also:</B><DD><A HREF="../../../javax/xml/transform/OutputKeys.html" title="class in javax.xml.transform"><CODE>OutputKeys</CODE></A>, 
<CODE>Properties</CODE>, 
<a href="http://www.w3.org/TR/xslt#output">
   XSL Transformations (XSLT) Version 1.0</a></DL>
</DD>
</DL>
<HR>

<A NAME="setOutputProperty(java.lang.String, java.lang.String)"><!-- --></A><H3>
setOutputProperty</H3>
<PRE>
public void <B>setOutputProperty</B>(java.lang.String&nbsp;name,
                              java.lang.String&nbsp;value)</PRE>
<DL>
<DD>Set an output property for the transformation.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#setOutputProperty(java.lang.String, java.lang.String)">setOutputProperty</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - A non-null String that specifies an output
 property name, which may be namespace qualified.<DD><CODE>value</CODE> - The non-null string value of the output property.<DT><B>See Also:</B><DD><A HREF="../../../javax/xml/transform/OutputKeys.html" title="class in javax.xml.transform"><CODE>OutputKeys</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getOutputProperty(java.lang.String)"><!-- --></A><H3>
getOutputProperty</H3>
<PRE>
public java.lang.String <B>getOutputProperty</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Get the value of an output property
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#getOutputProperty(java.lang.String)">getOutputProperty</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - A non-null String that specifies an output
 property name, which may be namespace qualified.
<DT><B>Returns:</B><DD>The string value of the output property, or null
 if no property was found.<DT><B>See Also:</B><DD><A HREF="../../../javax/xml/transform/OutputKeys.html" title="class in javax.xml.transform"><CODE>OutputKeys</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="changeOutputDestination(java.util.Properties, javax.xml.transform.Result)"><!-- --></A><H3>
changeOutputDestination</H3>
<PRE>
public void <B>changeOutputDestination</B>(java.util.Properties&nbsp;props,
                                    <A HREF="../../../javax/xml/transform/Result.html" title="interface in javax.xml.transform">Result</A>&nbsp;result)
                             throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Set a new output destination, supplying the output format details. <BR>
 This affects all further output until resetOutputDestination() is called. Note that
 it is the caller's responsibility to close the Writer after use.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>props</CODE> - Details of the new output format<DD><CODE>result</CODE> - Details of the new output destination
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="changeToTextOutputDestination(java.lang.StringBuffer)"><!-- --></A><H3>
changeToTextOutputDestination</H3>
<PRE>
public void <B>changeToTextOutputDestination</B>(java.lang.StringBuffer&nbsp;buffer)</PRE>
<DL>
<DD>Set a simple StringBuffer output destination. Used during calls to
 xsl:attribute, xsl:comment, xsl:processing-instruction
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getOutputter()"><!-- --></A><H3>
getOutputter</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/output/Outputter.html" title="class in com.icl.saxon.output">Outputter</A> <B>getOutputter</B>()</PRE>
<DL>
<DD>Get the current outputter
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="resetOutputDestination(com.icl.saxon.output.Outputter)"><!-- --></A><H3>
resetOutputDestination</H3>
<PRE>
public void <B>resetOutputDestination</B>(<A HREF="../../../com/icl/saxon/output/Outputter.html" title="class in com.icl.saxon.output">Outputter</A>&nbsp;outputter)
                            throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Close the current outputter, and revert to the previous outputter.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>outputter</CODE> - The outputter to revert to
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="makeMessageEmitter()"><!-- --></A><H3>
makeMessageEmitter</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A> <B>makeMessageEmitter</B>()
                           throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Make an Emitter to be used for xsl:message output
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setMessageEmitter(com.icl.saxon.output.Emitter)"><!-- --></A><H3>
setMessageEmitter</H3>
<PRE>
public void <B>setMessageEmitter</B>(<A HREF="../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A>&nbsp;emitter)</PRE>
<DL>
<DD>Set the Emitter to be used for xsl:message output
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getMessageEmitter()"><!-- --></A><H3>
getMessageEmitter</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A> <B>getMessageEmitter</B>()</PRE>
<DL>
<DD>Get the Emitter used for xsl:message output
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setRecoveryPolicy(int)"><!-- --></A><H3>
setRecoveryPolicy</H3>
<PRE>
public void <B>setRecoveryPolicy</B>(int&nbsp;policy)</PRE>
<DL>
<DD>Set the policy for handling recoverable errors
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getRecoveryPolicy()"><!-- --></A><H3>
getRecoveryPolicy</H3>
<PRE>
public int <B>getRecoveryPolicy</B>()</PRE>
<DL>
<DD>Get the policy for handling recoverable errors
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setErrorListener(javax.xml.transform.ErrorListener)"><!-- --></A><H3>
setErrorListener</H3>
<PRE>
public void <B>setErrorListener</B>(<A HREF="../../../javax/xml/transform/ErrorListener.html" title="interface in javax.xml.transform">ErrorListener</A>&nbsp;listener)</PRE>
<DL>
<DD>Set the error listener
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#setErrorListener(javax.xml.transform.ErrorListener)">setErrorListener</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>listener</CODE> - The new error listener.</DL>
</DD>
</DL>
<HR>

<A NAME="getErrorListener()"><!-- --></A><H3>
getErrorListener</H3>
<PRE>
public <A HREF="../../../javax/xml/transform/ErrorListener.html" title="interface in javax.xml.transform">ErrorListener</A> <B>getErrorListener</B>()</PRE>
<DL>
<DD>Get the error listener
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#getErrorListener()">getErrorListener</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The current error handler, which should never be null.</DL>
</DD>
</DL>
<HR>

<A NAME="reportRecoverableError(java.lang.String, javax.xml.transform.SourceLocator)"><!-- --></A><H3>
reportRecoverableError</H3>
<PRE>
public void <B>reportRecoverableError</B>(java.lang.String&nbsp;message,
                                   <A HREF="../../../javax/xml/transform/SourceLocator.html" title="interface in javax.xml.transform">SourceLocator</A>&nbsp;location)
                            throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Report a recoverable error
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE> - if the error listener decides not to recover
 from the error</DL>
</DD>
</DL>
<HR>

<A NAME="reportRecoverableError(javax.xml.transform.TransformerException)"><!-- --></A><H3>
reportRecoverableError</H3>
<PRE>
public void <B>reportRecoverableError</B>(<A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A>&nbsp;err)
                            throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Report a recoverable error
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE> - if the error listener decides not to recover
 from the error</DL>
</DD>
</DL>
<HR>

<A NAME="getDocumentPool()"><!-- --></A><H3>
getDocumentPool</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/om/DocumentPool.html" title="class in com.icl.saxon.om">DocumentPool</A> <B>getDocumentPool</B>()</PRE>
<DL>
<DD>Get the document pool. This is used only for source documents, not for stylesheet modules
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="clearDocumentPool()"><!-- --></A><H3>
clearDocumentPool</H3>
<PRE>
public void <B>clearDocumentPool</B>()</PRE>
<DL>
<DD>Clear the document pool. This is sometimes useful when using the same Transformer
 for a sequence of transformations, but it isn't done automatically, because when
 the transformations use common look-up documents, the caching is beneficial.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setLineNumbering(boolean)"><!-- --></A><H3>
setLineNumbering</H3>
<PRE>
public void <B>setLineNumbering</B>(boolean&nbsp;onOrOff)</PRE>
<DL>
<DD>Set line numbering (of the source document) on or off
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isLineNumbering()"><!-- --></A><H3>
isLineNumbering</H3>
<PRE>
public boolean <B>isLineNumbering</B>()</PRE>
<DL>
<DD>Determine whether line numbering is enabled
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="makeContext(com.icl.saxon.om.NodeInfo)"><!-- --></A><H3>
makeContext</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/Context.html" title="class in com.icl.saxon">Context</A> <B>makeContext</B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;node)</PRE>
<DL>
<DD>Create a new context with a given node as the current node and the only node in the current
 node list.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getBindery()"><!-- --></A><H3>
getBindery</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/Bindery.html" title="class in com.icl.saxon">Bindery</A> <B>getBindery</B>()</PRE>
<DL>
<DD>Get the current bindery
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getURIResolver()"><!-- --></A><H3>
getURIResolver</H3>
<PRE>
public <A HREF="../../../javax/xml/transform/URIResolver.html" title="interface in javax.xml.transform">URIResolver</A> <B>getURIResolver</B>()</PRE>
<DL>
<DD>Get the primary URI resolver.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#getURIResolver()">getURIResolver</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the user-supplied URI resolver if there is one, or the system-defined one
 otherwise (Note, this isn't quite as JAXP specifies it).</DL>
</DD>
</DL>
<HR>

<A NAME="getStandardURIResolver()"><!-- --></A><H3>
getStandardURIResolver</H3>
<PRE>
public <A HREF="../../../javax/xml/transform/URIResolver.html" title="interface in javax.xml.transform">URIResolver</A> <B>getStandardURIResolver</B>()</PRE>
<DL>
<DD>Get the fallback URI resolver.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the the system-defined URIResolver</DL>
</DD>
</DL>
<HR>

<A NAME="getKeyManager()"><!-- --></A><H3>
getKeyManager</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/KeyManager.html" title="class in com.icl.saxon">KeyManager</A> <B>getKeyManager</B>()</PRE>
<DL>
<DD>Get the KeyManager
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setNamePool(com.icl.saxon.om.NamePool)"><!-- --></A><H3>
setNamePool</H3>
<PRE>
public void <B>setNamePool</B>(<A HREF="../../../com/icl/saxon/om/NamePool.html" title="class in com.icl.saxon.om">NamePool</A>&nbsp;pool)</PRE>
<DL>
<DD>Set the name pool to be used
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getNamePool()"><!-- --></A><H3>
getNamePool</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/om/NamePool.html" title="class in com.icl.saxon.om">NamePool</A> <B>getNamePool</B>()</PRE>
<DL>
<DD>Get the name pool in use
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setTreeModel(int)"><!-- --></A><H3>
setTreeModel</H3>
<PRE>
public void <B>setTreeModel</B>(int&nbsp;model)</PRE>
<DL>
<DD>Set the tree data model to use
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTreeModel()"><!-- --></A><H3>
getTreeModel</H3>
<PRE>
public int <B>getTreeModel</B>()</PRE>
<DL>
<DD>Get the tree model in use
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="disableWhitespaceStripping(boolean)"><!-- --></A><H3>
disableWhitespaceStripping</H3>
<PRE>
public void <B>disableWhitespaceStripping</B>(boolean&nbsp;disable)</PRE>
<DL>
<DD>Disable whitespace stripping
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isWhitespaceStrippingDisabled()"><!-- --></A><H3>
isWhitespaceStrippingDisabled</H3>
<PRE>
public boolean <B>isWhitespaceStrippingDisabled</B>()</PRE>
<DL>
<DD>Determine if whitespace stripping is disabled
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="makeBuilder()"><!-- --></A><H3>
makeBuilder</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/om/Builder.html" title="class in com.icl.saxon.om">Builder</A> <B>makeBuilder</B>()</PRE>
<DL>
<DD>Make a builder for the selected tree model
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="makeStripper(com.icl.saxon.om.Builder)"><!-- --></A><H3>
makeStripper</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/om/Stripper.html" title="class in com.icl.saxon.om">Stripper</A> <B>makeStripper</B>(<A HREF="../../../com/icl/saxon/om/Builder.html" title="class in com.icl.saxon.om">Builder</A>&nbsp;b)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setDecimalFormatManager(com.icl.saxon.DecimalFormatManager)"><!-- --></A><H3>
setDecimalFormatManager</H3>
<PRE>
public void <B>setDecimalFormatManager</B>(<A HREF="../../../com/icl/saxon/DecimalFormatManager.html" title="class in com.icl.saxon">DecimalFormatManager</A>&nbsp;manager)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getDecimalFormatManager()"><!-- --></A><H3>
getDecimalFormatManager</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/DecimalFormatManager.html" title="class in com.icl.saxon">DecimalFormatManager</A> <B>getDecimalFormatManager</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setRuleManager(com.icl.saxon.RuleManager)"><!-- --></A><H3>
setRuleManager</H3>
<PRE>
public void <B>setRuleManager</B>(<A HREF="../../../com/icl/saxon/RuleManager.html" title="class in com.icl.saxon">RuleManager</A>&nbsp;r)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getRuleManager()"><!-- --></A><H3>
getRuleManager</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/RuleManager.html" title="class in com.icl.saxon">RuleManager</A> <B>getRuleManager</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setTraceListener(com.icl.saxon.trace.TraceListener)"><!-- --></A><H3>
setTraceListener</H3>
<PRE>
public void <B>setTraceListener</B>(<A HREF="../../../com/icl/saxon/trace/TraceListener.html" title="interface in com.icl.saxon.trace">TraceListener</A>&nbsp;trace)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTraceListener()"><!-- --></A><H3>
getTraceListener</H3>
<PRE>
public <A HREF="../../../com/icl/saxon/trace/TraceListener.html" title="interface in com.icl.saxon.trace">TraceListener</A> <B>getTraceListener</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isTracing()"><!-- --></A><H3>
isTracing</H3>
<PRE>
public final boolean <B>isTracing</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="pauseTracing(boolean)"><!-- --></A><H3>
pauseTracing</H3>
<PRE>
public void <B>pauseTracing</B>(boolean&nbsp;pause)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setPreparedStyleSheet(com.icl.saxon.PreparedStyleSheet)"><!-- --></A><H3>
setPreparedStyleSheet</H3>
<PRE>
public void <B>setPreparedStyleSheet</B>(<A HREF="../../../com/icl/saxon/PreparedStyleSheet.html" title="class in com.icl.saxon">PreparedStyleSheet</A>&nbsp;sheet)</PRE>
<DL>
<DD>Associate this Controller with a compiled stylesheet
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="usesPreviewMode()"><!-- --></A><H3>
usesPreviewMode</H3>
<PRE>
protected boolean <B>usesPreviewMode</B>()</PRE>
<DL>
<DD>Does this transformation use preview mode?
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="addTraceListener(com.icl.saxon.trace.TraceListener)"><!-- --></A><H3>
addTraceListener</H3>
<PRE>
public void <B>addTraceListener</B>(<A HREF="../../../com/icl/saxon/trace/TraceListener.html" title="interface in com.icl.saxon.trace">TraceListener</A>&nbsp;trace)</PRE>
<DL>
<DD>Adds the specified trace listener to receive trace events from
 this instance.
 Must be called before the invocation of the render method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>trace</CODE> - the trace listener.</DL>
</DD>
</DL>
<HR>

<A NAME="removeTraceListener(com.icl.saxon.trace.TraceListener)"><!-- --></A><H3>
removeTraceListener</H3>
<PRE>
public void <B>removeTraceListener</B>(<A HREF="../../../com/icl/saxon/trace/TraceListener.html" title="interface in com.icl.saxon.trace">TraceListener</A>&nbsp;trace)</PRE>
<DL>
<DD>Removes the specified trace listener so that the next invocation
 of the render method will not send trace events to the listener.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>trace</CODE> - the trace listener.</DL>
</DD>
</DL>
<HR>

<A NAME="getUserData(com.icl.saxon.om.NodeInfo, java.lang.String)"><!-- --></A><H3>
getUserData</H3>
<PRE>
public java.lang.Object <B>getUserData</B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;node,
                                    java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Get the named user data property for the node
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the user data property to return
<DT><B>Returns:</B><DD>The value of the named user data property.
 Returns null if no property of that name has been set using setUserData()
 for this NodeInfo object.</DL>
</DD>
</DL>
<HR>

<A NAME="setUserData(com.icl.saxon.om.NodeInfo, java.lang.String, java.lang.Object)"><!-- --></A><H3>
setUserData</H3>
<PRE>
public void <B>setUserData</B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;node,
                        java.lang.String&nbsp;name,
                        java.lang.Object&nbsp;data)</PRE>
<DL>
<DD>Set a user data property for a node.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the user data property to be set. Any existing user data property
 of the same name will be overwritten.<DD><CODE>data</CODE> - an object to be saved with this element, which can be
 retrieved later using getUserData().</DL>
</DD>
</DL>
<HR>

<A NAME="transform(javax.xml.transform.Source, javax.xml.transform.Result)"><!-- --></A><H3>
transform</H3>
<PRE>
public void <B>transform</B>(<A HREF="../../../javax/xml/transform/Source.html" title="interface in javax.xml.transform">Source</A>&nbsp;source,
                      <A HREF="../../../javax/xml/transform/Result.html" title="interface in javax.xml.transform">Result</A>&nbsp;result)
               throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Process the source tree to SAX parse events.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#transform(javax.xml.transform.Source, javax.xml.transform.Result)">transform</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>source</CODE> - The input for the source tree.<DD><CODE>result</CODE> - The destination for the result tree.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE> - if the transformation fails. As a special case,
 the method throws a TerminationException (a subclass of TransformerException)
 if the transformation was terminated using xsl:message terminate="yes".</DL>
</DD>
</DL>
<HR>

<A NAME="transformDocument(com.icl.saxon.om.NodeInfo, javax.xml.transform.Result)"><!-- --></A><H3>
transformDocument</H3>
<PRE>
public void <B>transformDocument</B>(<A HREF="../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;startNode,
                              <A HREF="../../../javax/xml/transform/Result.html" title="interface in javax.xml.transform">Result</A>&nbsp;result)
                       throws <A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Render a source XML document supplied as a tree. <br>
 A new output destination should be created for each source document,
 by using setOutputDetails(). <br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>startNode</CODE> - A Node that identifies the source document to be transformed and the
 node where the transformation should start<DD><CODE>result</CODE> - The output destination
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setParameter(java.lang.String, java.lang.Object)"><!-- --></A><H3>
setParameter</H3>
<PRE>
public void <B>setParameter</B>(java.lang.String&nbsp;expandedName,
                         java.lang.Object&nbsp;value)</PRE>
<DL>
<DD>Set a parameter for the transformation.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#setParameter(java.lang.String, java.lang.Object)">setParameter</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>expandedName</CODE> - The name of the parameter in {uri}local format<DD><CODE>value</CODE> - The value object.  This can be any valid Java object
 it follows the same conversion rules as a value returned from a Saxon extension function.</DL>
</DD>
</DL>
<HR>

<A NAME="setParams(com.icl.saxon.ParameterSet)"><!-- --></A><H3>
setParams</H3>
<PRE>
public void <B>setParams</B>(<A HREF="../../../com/icl/saxon/ParameterSet.html" title="class in com.icl.saxon">ParameterSet</A>&nbsp;params)</PRE>
<DL>
<DD>Set parameters supplied externally (typically, on the command line).
 (non-TRAX method retained for backwards compatibility)
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>params</CODE> - A ParameterSet containing the (name, value) pairs.</DL>
</DD>
</DL>
<HR>

<A NAME="clearParameters()"><!-- --></A><H3>
clearParameters</H3>
<PRE>
public void <B>clearParameters</B>()</PRE>
<DL>
<DD>Reset the parameters to a null list.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#clearParameters()">clearParameters</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getParameter(java.lang.String)"><!-- --></A><H3>
getParameter</H3>
<PRE>
public java.lang.Object <B>getParameter</B>(java.lang.String&nbsp;expandedName)</PRE>
<DL>
<DD>Get a parameter to the transformation
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#getParameter(java.lang.String)">getParameter</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>expandedName</CODE> - of <code>Object</code> to get
<DT><B>Returns:</B><DD>A parameter that has been set with setParameter.</DL>
</DD>
</DL>
<HR>

<A NAME="setURIResolver(javax.xml.transform.URIResolver)"><!-- --></A><H3>
setURIResolver</H3>
<PRE>
public void <B>setURIResolver</B>(<A HREF="../../../javax/xml/transform/URIResolver.html" title="interface in javax.xml.transform">URIResolver</A>&nbsp;resolver)</PRE>
<DL>
<DD>Set an object that will be used to resolve URIs used in
 document(), etc.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../javax/xml/transform/Transformer.html#setURIResolver(javax.xml.transform.URIResolver)">setURIResolver</A></CODE> in class <CODE><A HREF="../../../javax/xml/transform/Transformer.html" title="class in javax.xml.transform">Transformer</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>resolver</CODE> - An object that implements the URIResolver interface,
 or null.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../com/icl/saxon/Context.html" title="class in com.icl.saxon"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../com/icl/saxon/DecimalFormatManager.html" title="class in com.icl.saxon"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Controller.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
