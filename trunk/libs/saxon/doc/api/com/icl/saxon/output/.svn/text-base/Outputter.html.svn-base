<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.4.2_06) on Thu Nov 24 12:17:52 GMT 2005 -->
<TITLE>
Outputter
</TITLE>

<META NAME="keywords" CONTENT="com.icl.saxon.output.Outputter class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="Outputter";
}
</SCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/icl/saxon/output/NamespaceEmitter.html" title="class in com.icl.saxon.output"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/icl/saxon/output/ProxyEmitter.html" title="class in com.icl.saxon.output"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Outputter.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.icl.saxon.output</FONT>
<BR>
Class Outputter</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by"><B>com.icl.saxon.output.Outputter</B>
</PRE>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../com/icl/saxon/output/GeneralOutputter.html" title="class in com.icl.saxon.output">GeneralOutputter</A>, <A HREF="../../../../com/icl/saxon/output/StringOutputter.html" title="class in com.icl.saxon.output">StringOutputter</A></DD>
</DL>
<HR>
<DL>
<DT>public abstract class <B>Outputter</B><DT>extends java.lang.Object</DL>

<P>
This class allows output to be generated. It channels output requests to an
 Emitter which does the actual writing. This is an abstract class, there are
 concrete implementions for XML output and text output.
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#emitter">emitter</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#Outputter()">Outputter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#checkAttributePrefix(int)">checkAttributePrefix</A></B>(int&nbsp;nameCode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check that the prefix for an attribute is acceptable, returning a substitute
 prefix if not.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#close()">close</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close the output</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#copyNamespaceNode(int)">copyNamespaceNode</A></B>(int&nbsp;nscode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copy a namespace node to the current element node
 (Rules defined in XSLT 1.0 errata)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#getEmitter()">getEmitter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get emitter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.util.Properties</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#getOutputProperties()">getOutputProperties</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#open()">open</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Start the output process</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#reset()">reset</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Synchronize the state of the Outputter with that of the underlying Emitter</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#setEscaping(boolean)">setEscaping</A></B>(boolean&nbsp;escaping)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Switch escaping (of special characters) on or off.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#thereIsAnOpenStartTag()">thereIsAnOpenStartTag</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test whether there is an open start tag.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#write(java.lang.String)">write</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Produce literal output.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#writeAttribute(int, java.lang.String)">writeAttribute</A></B>(int&nbsp;nameCode,
               java.lang.String&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output an attribute value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#writeAttribute(int, java.lang.String, boolean)">writeAttribute</A></B>(int&nbsp;nameCode,
               java.lang.String&nbsp;value,
               boolean&nbsp;noEscape)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output an attribute value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#writeComment(java.lang.String)">writeComment</A></B>(java.lang.String&nbsp;comment)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write a comment</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#writeContent(char[], int, int)">writeContent</A></B>(char[]&nbsp;chars,
             int&nbsp;start,
             int&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Produce text content output.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#writeContent(java.lang.String)">writeContent</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Produce text content output.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#writeEndTag(int)">writeEndTag</A></B>(int&nbsp;nameCode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output an element end tag.<br></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#writeNamespaceDeclaration(int)">writeNamespaceDeclaration</A></B>(int&nbsp;nscode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output a namespace declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#writePI(java.lang.String, java.lang.String)">writePI</A></B>(java.lang.String&nbsp;target,
        java.lang.String&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write a processing instruction</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/output/Outputter.html#writeStartTag(int)">writeStartTag</A></B>(int&nbsp;nameCode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output an element start tag.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="emitter"><!-- --></A><H3>
emitter</H3>
<PRE>
protected <A HREF="../../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A> <B>emitter</B></PRE>
<DL>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="Outputter()"><!-- --></A><H3>
Outputter</H3>
<PRE>
public <B>Outputter</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="getEmitter()"><!-- --></A><H3>
getEmitter</H3>
<PRE>
public <A HREF="../../../../com/icl/saxon/output/Emitter.html" title="class in com.icl.saxon.output">Emitter</A> <B>getEmitter</B>()
                   throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Get emitter. This is used by xsl:copy-of, a fragment is copied directly to the
 Emitter rather than going via the Outputter.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="reset()"><!-- --></A><H3>
reset</H3>
<PRE>
public abstract void <B>reset</B>()
                    throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Synchronize the state of the Outputter with that of the underlying Emitter
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getOutputProperties()"><!-- --></A><H3>
getOutputProperties</H3>
<PRE>
public abstract java.util.Properties <B>getOutputProperties</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setEscaping(boolean)"><!-- --></A><H3>
setEscaping</H3>
<PRE>
public final void <B>setEscaping</B>(boolean&nbsp;escaping)
                       throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Switch escaping (of special characters) on or off.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="open()"><!-- --></A><H3>
open</H3>
<PRE>
public final void <B>open</B>()
                throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Start the output process
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="write(java.lang.String)"><!-- --></A><H3>
write</H3>
<PRE>
public abstract void <B>write</B>(java.lang.String&nbsp;s)
                    throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Produce literal output. This is written as is, without any escaping.
 The method is provided for Java applications that wish to output literal HTML text.
 It is not used by the XSL system, which always writes using specific methods such as
 writeStartTag().
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="writeContent(java.lang.String)"><!-- --></A><H3>
writeContent</H3>
<PRE>
public abstract void <B>writeContent</B>(java.lang.String&nbsp;s)
                           throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Produce text content output. <BR>
 Special characters are escaped using XML/HTML conventions if the output format
 requires it.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - The String to be output
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE> - for any failure</DL>
</DD>
</DL>
<HR>

<A NAME="writeContent(char[], int, int)"><!-- --></A><H3>
writeContent</H3>
<PRE>
public abstract void <B>writeContent</B>(char[]&nbsp;chars,
                                  int&nbsp;start,
                                  int&nbsp;length)
                           throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Produce text content output. <BR>
 Special characters are escaped using XML/HTML conventions if the output format
 requires it.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>chars</CODE> - Character array to be output<DD><CODE>start</CODE> - start position of characters to be output<DD><CODE>length</CODE> - number of characters to be output
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE> - for any failure</DL>
</DD>
</DL>
<HR>

<A NAME="writeStartTag(int)"><!-- --></A><H3>
writeStartTag</H3>
<PRE>
public abstract void <B>writeStartTag</B>(int&nbsp;nameCode)
                            throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Output an element start tag. <br>
 The actual output of the tag is deferred until all attributes have been output
 using writeAttribute().
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nameCode</CODE> - The element name code
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="checkAttributePrefix(int)"><!-- --></A><H3>
checkAttributePrefix</H3>
<PRE>
public abstract int <B>checkAttributePrefix</B>(int&nbsp;nameCode)
                                  throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Check that the prefix for an attribute is acceptable, returning a substitute
 prefix if not. The prefix is acceptable unless a namespace declaration has been
 written that assignes this prefix to a different namespace URI. This method
 also checks that the attribute namespace has been declared, and declares it
 if not.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="writeNamespaceDeclaration(int)"><!-- --></A><H3>
writeNamespaceDeclaration</H3>
<PRE>
public abstract void <B>writeNamespaceDeclaration</B>(int&nbsp;nscode)
                                        throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Output a namespace declaration. <br>
 This is added to a list of pending namespaces for the current start tag.
 If there is already another declaration of the same prefix, this one is
 ignored.
 Note that unlike SAX2 startPrefixMapping(), this call is made AFTER writing the start tag.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nscode</CODE> - The namespace code
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE> - if there is no start tag to write to (created using writeStartTag),
 or if character content has been written since the start tag was written.</DL>
</DD>
</DL>
<HR>

<A NAME="copyNamespaceNode(int)"><!-- --></A><H3>
copyNamespaceNode</H3>
<PRE>
public abstract void <B>copyNamespaceNode</B>(int&nbsp;nscode)
                                throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Copy a namespace node to the current element node
 (Rules defined in XSLT 1.0 errata)
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="thereIsAnOpenStartTag()"><!-- --></A><H3>
thereIsAnOpenStartTag</H3>
<PRE>
public abstract boolean <B>thereIsAnOpenStartTag</B>()</PRE>
<DL>
<DD>Test whether there is an open start tag. This determines whether it is
 possible to write an attribute node at this point.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="writeAttribute(int, java.lang.String)"><!-- --></A><H3>
writeAttribute</H3>
<PRE>
public void <B>writeAttribute</B>(int&nbsp;nameCode,
                           java.lang.String&nbsp;value)
                    throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Output an attribute value. <br>
 This is added to a list of pending attributes for the current start tag, overwriting
 any previous attribute with the same name. <br>
 This method should NOT be used to output namespace declarations.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nameCode</CODE> - The name code of the attribute<DD><CODE>value</CODE> - The value of the attribute
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE> - if there is no start tag to write to (created using writeStartTag),
 or if character content has been written since the start tag was written.</DL>
</DD>
</DL>
<HR>

<A NAME="writeAttribute(int, java.lang.String, boolean)"><!-- --></A><H3>
writeAttribute</H3>
<PRE>
public abstract void <B>writeAttribute</B>(int&nbsp;nameCode,
                                    java.lang.String&nbsp;value,
                                    boolean&nbsp;noEscape)
                             throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Output an attribute value. <br>
 This is added to a list of pending attributes for the current start tag, overwriting
 any previous attribute with the same name. <br>
 This method should NOT be used to output namespace declarations.<br>
 Before calling this, checkAttributePrefix() should be called to ensure the namespace
 is OK.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - The value of the attribute<DD><CODE>noEscape</CODE> - True if it's known there are no special characters in the value. If
 unsure, set this to false.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE> - if there is no start tag to write to (created using writeStartTag),
 or if character content has been written since the start tag was written.</DL>
</DD>
</DL>
<HR>

<A NAME="writeEndTag(int)"><!-- --></A><H3>
writeEndTag</H3>
<PRE>
public abstract void <B>writeEndTag</B>(int&nbsp;nameCode)
                          throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Output an element end tag.<br>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nameCode</CODE> - The element name code
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="writeComment(java.lang.String)"><!-- --></A><H3>
writeComment</H3>
<PRE>
public abstract void <B>writeComment</B>(java.lang.String&nbsp;comment)
                           throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Write a comment
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="writePI(java.lang.String, java.lang.String)"><!-- --></A><H3>
writePI</H3>
<PRE>
public abstract void <B>writePI</B>(java.lang.String&nbsp;target,
                             java.lang.String&nbsp;data)
                      throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Write a processing instruction
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="close()"><!-- --></A><H3>
close</H3>
<PRE>
public abstract void <B>close</B>()
                    throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Close the output
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/icl/saxon/output/NamespaceEmitter.html" title="class in com.icl.saxon.output"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/icl/saxon/output/ProxyEmitter.html" title="class in com.icl.saxon.output"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Outputter.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
