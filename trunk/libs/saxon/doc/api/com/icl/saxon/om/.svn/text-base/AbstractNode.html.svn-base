<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.4.2_06) on Thu Nov 24 12:17:52 GMT 2005 -->
<TITLE>
AbstractNode
</TITLE>

<META NAME="keywords" CONTENT="com.icl.saxon.om.AbstractNode class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="AbstractNode";
}
</SCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../../../../com/icl/saxon/om/Axis.html" title="class in com.icl.saxon.om"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AbstractNode.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.icl.saxon.om</FONT>
<BR>
Class AbstractNode</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by"><B>com.icl.saxon.om.AbstractNode</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../javax/xml/transform/dom/DOMLocator.html" title="interface in javax.xml.transform.dom">DOMLocator</A>, org.w3c.dom.Node, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>, <A HREF="../../../../javax/xml/transform/Source.html" title="interface in javax.xml.transform">Source</A>, <A HREF="../../../../javax/xml/transform/SourceLocator.html" title="interface in javax.xml.transform">SourceLocator</A></DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../com/icl/saxon/tree/NodeImpl.html" title="class in com.icl.saxon.tree">NodeImpl</A>, com.icl.saxon.tinytree.TinyNodeImpl</DD>
</DL>
<HR>
<DL>
<DT>public abstract class <B>AbstractNode</B><DT>extends java.lang.Object<DT>implements org.w3c.dom.Node, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>, <A HREF="../../../../javax/xml/transform/SourceLocator.html" title="interface in javax.xml.transform">SourceLocator</A>, <A HREF="../../../../javax/xml/transform/dom/DOMLocator.html" title="interface in javax.xml.transform.dom">DOMLocator</A></DL>

<P>
This class is an abstract implementation of the Saxon NodeInfo interface;
 it also contains concrete implementations of most of the DOM methods in terms
 of the NodeInfo methods. These include all the methods defined on the DOM Node
 class itself, and most of those defined on subclasses such as Document, Text,
 and Comment: because
 of the absence of multiple inheritance, this is the only way of making these
 methods reusable by multiple implementations.
 The class contains no data, and can be used as a common
 superclass for different implementations of Node and NodeInfo.
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;char[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#NODE_LETTER">NODE_LETTER</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chararacteristic letters to identify each type of node, indexed using the node type
 values.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.w3c.dom.Node"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Fields inherited from interface org.w3c.dom.Node</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>ATTRIBUTE_NODE, CDATA_SECTION_NODE, COMMENT_NODE, DOCUMENT_FRAGMENT_NODE, DOCUMENT_NODE, DOCUMENT_TYPE_NODE, ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE, NOTATION_NODE, PROCESSING_INSTRUCTION_NODE, TEXT_NODE</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_com.icl.saxon.om.NodeInfo"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Fields inherited from interface com.icl.saxon.om.<A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#ATTRIBUTE">ATTRIBUTE</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#COMMENT">COMMENT</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#ELEMENT">ELEMENT</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#NAMESPACE">NAMESPACE</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#NODE">NODE</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#NONE">NONE</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#NUMBER_OF_TYPES">NUMBER_OF_TYPES</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#PI">PI</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#ROOT">ROOT</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#TEXT">TEXT</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#AbstractNode()">AbstractNode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#appendChild(org.w3c.dom.Node)">appendChild</A></B>(org.w3c.dom.Node&nbsp;newChild)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds the node <code>newChild</code> to the end of the list of children
 of this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#appendData(java.lang.String)">appendData</A></B>(java.lang.String&nbsp;arg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Append the string to the end of the character data of the node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#cloneNode(boolean)">cloneNode</A></B>(boolean&nbsp;deep)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a duplicate of this node, i.e., serves as a generic copy
 constructor for nodes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;short</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#compareDocumentPosition(org.w3c.dom.Node)">compareDocumentPosition</A></B>(org.w3c.dom.Node&nbsp;other)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compares the reference node, i.e.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#compareOrder(com.icl.saxon.om.NodeInfo)">compareOrder</A></B>(<A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;other)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the relative position of this node and another node, in document order.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#copyStringValue(com.icl.saxon.output.Outputter)">copyStringValue</A></B>(<A HREF="../../../../com/icl/saxon/output/Outputter.html" title="class in com.icl.saxon.output">Outputter</A>&nbsp;out)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copy the string-value of this node to a given outputter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Attr</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createAttribute(java.lang.String)">createAttribute</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create an <code>Attr</code> of the given name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Attr</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createAttributeNS(java.lang.String, java.lang.String)">createAttributeNS</A></B>(java.lang.String&nbsp;namespaceURI,
                  java.lang.String&nbsp;qualifiedName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create an attribute of the given qualified name and namespace URI.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.CDATASection</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createCDATASection(java.lang.String)">createCDATASection</A></B>(java.lang.String&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a <code>CDATASection</code> node whose value  is the specified
 string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Comment</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createComment(java.lang.String)">createComment</A></B>(java.lang.String&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a <code>Comment</code> node given the specified string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.DocumentFragment</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createDocumentFragment()">createDocumentFragment</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates an empty <code>DocumentFragment</code> object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Element</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createElement(java.lang.String)">createElement</A></B>(java.lang.String&nbsp;tagName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates an element of the type specified.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Element</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createElementNS(java.lang.String, java.lang.String)">createElementNS</A></B>(java.lang.String&nbsp;namespaceURI,
                java.lang.String&nbsp;qualifiedName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create an element of the given qualified name and namespace URI.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.EntityReference</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createEntityReference(java.lang.String)">createEntityReference</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create an <code>EntityReference</code> object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.ProcessingInstruction</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createProcessingInstruction(java.lang.String, java.lang.String)">createProcessingInstruction</A></B>(java.lang.String&nbsp;target,
                            java.lang.String&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a <code>ProcessingInstruction</code> node given the specified
 name and data strings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Text</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#createTextNode(java.lang.String)">createTextNode</A></B>(java.lang.String&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a <code>Text</code> node given the specified string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#deleteData(int, int)">deleteData</A></B>(int&nbsp;offset,
           int&nbsp;count)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remove a range of 16-bit units from the node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#disallowUpdate()">disallowUpdate</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal method used to indicate that update operations are not allowed</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#generateId()">generateId</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get a character string that uniquely identifies this node</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getAttribute(java.lang.String)">getAttribute</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves an attribute value by name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Attr</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getAttributeNode(java.lang.String)">getAttributeNode</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves an attribute node by name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Attr</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getAttributeNodeNS(java.lang.String, java.lang.String)">getAttributeNodeNS</A></B>(java.lang.String&nbsp;namespaceURI,
                   java.lang.String&nbsp;localName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves an <code>Attr</code> node by local name and namespace URI.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getAttributeNS(java.lang.String, java.lang.String)">getAttributeNS</A></B>(java.lang.String&nbsp;namespaceURI,
               java.lang.String&nbsp;localName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves an attribute value by local name and namespace URI.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.NamedNodeMap</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getAttributes()">getAttributes</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a <code>NamedNodeMap</code> containing the attributes of this node (if
 it is an <code>Element</code> ) or <code>null</code> otherwise.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getAttributeValue(int)">getAttributeValue</A></B>(int&nbsp;fingerprint)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the value of a given attribute of this node</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getAttributeValue(java.lang.String, java.lang.String)">getAttributeValue</A></B>(java.lang.String&nbsp;uri,
                  java.lang.String&nbsp;localName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find the value of a given attribute of this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getBaseURI()">getBaseURI</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the base URI for the node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.NodeList</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getChildNodes()">getChildNodes</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a <code>NodeList</code> that contains all children of this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getColumnNumber()">getColumnNumber</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the column number of the node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getData()">getData</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the character data of a Text or Comment node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getDisplayName()">getDisplayName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the display name of this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.DocumentType</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getDoctype()">getDoctype</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the Document Type Declaration (see <code>DocumentType</code> )
 associated with this document.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Element</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getDocumentElement()">getDocumentElement</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the outermost element.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/icl/saxon/om/DocumentInfo.html" title="interface in com.icl.saxon.om">DocumentInfo</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getDocumentRoot()">getDocumentRoot</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the root (document) node</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Element</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getElementById(java.lang.String)">getElementById</A></B>(java.lang.String&nbsp;elementId)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the <code>Element</code> whose <code>ID</code> is given by
 <code>elementId</code> .</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.NodeList</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getElementsByTagName(java.lang.String)">getElementsByTagName</A></B>(java.lang.String&nbsp;tagname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a <code>NodeList</code> of all the <code>Elements</code> with
 a given tag name in the order in which they are encountered in a
 preorder traversal of the <code>Document</code> tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.NodeList</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getElementsByTagNameNS(java.lang.String, java.lang.String)">getElementsByTagNameNS</A></B>(java.lang.String&nbsp;namespaceURI,
                       java.lang.String&nbsp;localName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return a <code>NodeList</code> of all the <code>Elements</code> with
 a given  local name and namespace URI in the order in which they are
 encountered in a preorder traversal of the <code>Document</code> tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../com/icl/saxon/om/AxisEnumeration.html" title="interface in com.icl.saxon.om">AxisEnumeration</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getEnumeration(byte, com.icl.saxon.pattern.NodeTest)">getEnumeration</A></B>(byte&nbsp;axisNumber,
               <A HREF="../../../../com/icl/saxon/pattern/NodeTest.html" title="class in com.icl.saxon.pattern">NodeTest</A>&nbsp;nodeTest)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an enumeration over the nodes reached by the given axis from this node</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getFeature(java.lang.String, java.lang.String)">getFeature</A></B>(java.lang.String&nbsp;feature,
           java.lang.String&nbsp;version)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns a specialized object which implements the
 specialized APIs of the specified feature and version, as specified
 in .</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getFingerprint()">getFingerprint</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the fingerprint of the node, used for matching names</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getFirstChild()">getFirstChild</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get first child (DOM method)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.DOMImplementation</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getImplementation()">getImplementation</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get a <code>DOMImplementation</code> object that handles this document.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getLastChild()">getLastChild</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get last child (DOM method)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getLength()">getLength</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the length of a Text or Comment node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getLineNumber()">getLineNumber</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the line number of the node within its source document entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getLocalName()">getLocalName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the local name of this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getName()">getName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the name of an attribute node (the QName) (DOM method)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getNameCode()">getNameCode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the name code of the node, used for displaying names</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getNamespaceURI()">getNamespaceURI</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The namespace URI of this node, or <code>null</code> if it is
 unspecified.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getNextSibling()">getNextSibling</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get next sibling node (DOM method)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getNodeName()">getNodeName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the name of this node, following the DOM rules</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getNodeValue()">getNodeValue</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the node value as defined in the DOM.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getOriginatingNode()">getOriginatingNode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the node corresponding to this javax.xml.transform.dom.DOMLocator</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Document</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getOwnerDocument()">getOwnerDocument</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the <code>Document</code> object associated with this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Element</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getOwnerElement()">getOwnerElement</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>Element</code> node this attribute is attached to or
 <code>null</code> if this attribute is not in use.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getParent()">getParent</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find the parent node of this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getParentNode()">getParentNode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find the parent node of this node (DOM method).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getPrefix()">getPrefix</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the prefix part of the name of this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getPreviousSibling()">getPreviousSibling</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the previous sibling of the node (DOM method)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getPublicId()">getPublicId</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the public identifier of the document entity containing this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.TypeInfo</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getSchemaTypeInfo()">getSchemaTypeInfo</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The type information associated with this attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getSpecified()">getSpecified</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If this attribute was explicitly given a value in the original
 document, this is <code>true</code> ; otherwise, it is
 <code>false</code>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getSystemId()">getSystemId</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the system ID for the entity containing the node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getTagName()">getTagName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The name of the element (DOM interface).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getTextContent()">getTextContent</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This attribute returns the text content of this node and its
 descendants.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getURI()">getURI</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the URI part of the name of this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getUserData(java.lang.String)">getUserData</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves the object associated to a key on a this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getValue()">getValue</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the character value of an attribute node (DOM method)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#getWholeText()">getWholeText</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns all text of <code>Text</code> nodes logically-adjacent text
 nodes to this node, concatenated in document order.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#hasAttribute(java.lang.String)">hasAttribute</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns <code>true</code> when an attribute with a given name is
 specified on this element or has a default value, <code>false</code>
 otherwise.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#hasAttributeNS(java.lang.String, java.lang.String)">hasAttributeNS</A></B>(java.lang.String&nbsp;namespaceURI,
               java.lang.String&nbsp;localName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns <code>true</code> when an attribute with a given local name
 and namespace URI is specified on this element or has a default value,
 <code>false</code> otherwise.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#hasAttributes()">hasAttributes</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this node has any attributes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#hasChildNodes()">hasChildNodes</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether the node has any children.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#importNode(org.w3c.dom.Node, boolean)">importNode</A></B>(org.w3c.dom.Node&nbsp;importedNode,
           boolean&nbsp;deep)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Import a node from another document to this document.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#insertBefore(org.w3c.dom.Node, org.w3c.dom.Node)">insertBefore</A></B>(org.w3c.dom.Node&nbsp;newChild,
             org.w3c.dom.Node&nbsp;refChild)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Insert the node <code>newChild</code> before the existing child node
 <code>refChild</code>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#insertData(int, java.lang.String)">insertData</A></B>(int&nbsp;offset,
           java.lang.String&nbsp;arg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Insert a string at the specified character offset.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#isDefaultNamespace(java.lang.String)">isDefaultNamespace</A></B>(java.lang.String&nbsp;namespaceURI)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method checks if the specified <code>namespaceURI</code> is the
 default namespace or not.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#isElementContentWhitespace()">isElementContentWhitespace</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this text node contains <a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character'>
 element content whitespace</a>, often abusively called "ignorable whitespace".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#isEqualNode(org.w3c.dom.Node)">isEqualNode</A></B>(org.w3c.dom.Node&nbsp;arg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether two nodes are equal.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#isId()">isId</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this attribute is known to be of type ID (i.e.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#isSameNode(org.w3c.dom.Node)">isSameNode</A></B>(org.w3c.dom.Node&nbsp;other)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this node is the same node as the given one.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#isSameNodeInfo(com.icl.saxon.om.NodeInfo)">isSameNodeInfo</A></B>(<A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;other)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine whether this is the same node as another node</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#isSupported(java.lang.String, java.lang.String)">isSupported</A></B>(java.lang.String&nbsp;feature,
            java.lang.String&nbsp;version)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the DOM implementation implements a specific feature and
 that feature is supported by this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#lookupNamespaceURI(java.lang.String)">lookupNamespaceURI</A></B>(java.lang.String&nbsp;prefix)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Look up the namespace URI associated to the given prefix, starting from
 this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#lookupPrefix(java.lang.String)">lookupPrefix</A></B>(java.lang.String&nbsp;namespaceURI)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Look up the prefix associated to the given namespace URI, starting from
 this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#normalize()">normalize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Puts all <code>Text</code> nodes in the full depth of the sub-tree
 underneath this <code>Node</code>, including attribute nodes, into a
 "normal" form where only structure (e.g., elements, comments,
 processing instructions, CDATA sections, and entity references)
 separates <code>Text</code> nodes, i.e., there are neither adjacent
 <code>Text</code> nodes nor empty <code>Text</code> nodes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#outputNamespaceNodes(com.icl.saxon.output.Outputter, boolean)">outputNamespaceNodes</A></B>(<A HREF="../../../../com/icl/saxon/output/Outputter.html" title="class in com.icl.saxon.output">Outputter</A>&nbsp;out,
                     boolean&nbsp;includeAncestors)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output all namespace nodes associated with this element.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#removeAttribute(java.lang.String)">removeAttribute</A></B>(java.lang.String&nbsp;oldAttr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the specified attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Attr</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#removeAttributeNode(org.w3c.dom.Attr)">removeAttributeNode</A></B>(org.w3c.dom.Attr&nbsp;oldAttr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the specified attribute node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#removeAttributeNS(java.lang.String, java.lang.String)">removeAttributeNS</A></B>(java.lang.String&nbsp;namespaceURI,
                  java.lang.String&nbsp;localName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes an attribute by local name and namespace URI.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#removeChild(org.w3c.dom.Node)">removeChild</A></B>(org.w3c.dom.Node&nbsp;oldChild)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remove the child node indicated by <code>oldChild</code> from the
 list of children, and returns it.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Node</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#replaceChild(org.w3c.dom.Node, org.w3c.dom.Node)">replaceChild</A></B>(org.w3c.dom.Node&nbsp;newChild,
             org.w3c.dom.Node&nbsp;oldChild)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Replace the child node <code>oldChild</code> with
 <code>newChild</code> in the list of children, and returns the
 <code>oldChild</code> node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#replaceData(int, int, java.lang.String)">replaceData</A></B>(int&nbsp;offset,
            int&nbsp;count,
            java.lang.String&nbsp;arg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Replace the characters starting at the specified 16-bit unit offset
 with the specified string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Text</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#replaceWholeText(java.lang.String)">replaceWholeText</A></B>(java.lang.String&nbsp;content)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Replaces the text of the current node and all logically-adjacent text
 nodes with the specified text.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Attr</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setAttributeNode(org.w3c.dom.Attr)">setAttributeNode</A></B>(org.w3c.dom.Attr&nbsp;newAttr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds a new attribute node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Attr</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setAttributeNodeNS(org.w3c.dom.Attr)">setAttributeNodeNS</A></B>(org.w3c.dom.Attr&nbsp;newAttr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a new attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setAttributeNS(java.lang.String, java.lang.String, java.lang.String)">setAttributeNS</A></B>(java.lang.String&nbsp;namespaceURI,
               java.lang.String&nbsp;qualifiedName,
               java.lang.String&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds a new attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setData(java.lang.String)">setData</A></B>(java.lang.String&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the character data of a Text or Comment node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setIdAttribute(java.lang.String, boolean)">setIdAttribute</A></B>(java.lang.String&nbsp;name,
               boolean&nbsp;isId)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the parameter <code>isId</code> is <code>true</code>, this method
 declares the specified attribute to be a user-determined ID attribute
 .</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setIdAttributeNode(org.w3c.dom.Attr, boolean)">setIdAttributeNode</A></B>(org.w3c.dom.Attr&nbsp;idAttr,
                   boolean&nbsp;isId)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the parameter <code>isId</code> is <code>true</code>, this method
 declares the specified attribute to be a user-determined ID attribute
 .</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setIdAttributeNS(java.lang.String, java.lang.String, boolean)">setIdAttributeNS</A></B>(java.lang.String&nbsp;namespaceURI,
                 java.lang.String&nbsp;localName,
                 boolean&nbsp;isId)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the parameter <code>isId</code> is <code>true</code>, this method
 declares the specified attribute to be a user-determined ID attribute
 .</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setNodeValue(java.lang.String)">setNodeValue</A></B>(java.lang.String&nbsp;nodeValue)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the node value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setPrefix(java.lang.String)">setPrefix</A></B>(java.lang.String&nbsp;prefix)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the namespace prefix of this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setTextContent(java.lang.String)">setTextContent</A></B>(java.lang.String&nbsp;textContent)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This attribute returns the text content of this node and its
 descendants.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler)">setUserData</A></B>(java.lang.String&nbsp;key,
            java.lang.Object&nbsp;data,
            org.w3c.dom.UserDataHandler&nbsp;handler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Associate an object to a key on this node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#setValue(java.lang.String)">setValue</A></B>(java.lang.String&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the value of an attribute node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.w3c.dom.Text</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#splitText(int)">splitText</A></B>(int&nbsp;offset)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Break this node into two nodes at the specified offset,
 keeping both in the tree as siblings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#substringData(int, int)">substringData</A></B>(int&nbsp;offset,
              int&nbsp;count)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Extract a range of data from a Text or Comment node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/icl/saxon/om/AbstractNode.html#supports(java.lang.String, java.lang.String)">supports</A></B>(java.lang.String&nbsp;feature,
         java.lang.String&nbsp;version)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alternative to isSupported(), defined in a draft DOM spec</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.w3c.dom.Node"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from interface org.w3c.dom.Node</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>getNodeType</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_com.icl.saxon.om.NodeInfo"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from interface com.icl.saxon.om.<A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#copy(com.icl.saxon.output.Outputter)">copy</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getNodeType()">getNodeType</A>, <A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getStringValue()">getStringValue</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_javax.xml.transform.Source"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from interface javax.xml.transform.<A HREF="../../../../javax/xml/transform/Source.html" title="interface in javax.xml.transform">Source</A></B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../javax/xml/transform/Source.html#setSystemId(java.lang.String)">setSystemId</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="NODE_LETTER"><!-- --></A><H3>
NODE_LETTER</H3>
<PRE>
public static final char[] <B>NODE_LETTER</B></PRE>
<DL>
<DD>Chararacteristic letters to identify each type of node, indexed using the node type
 values. These are used as the initial letter of the result of generate-id()
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="AbstractNode()"><!-- --></A><H3>
AbstractNode</H3>
<PRE>
public <B>AbstractNode</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="isSameNodeInfo(com.icl.saxon.om.NodeInfo)"><!-- --></A><H3>
isSameNodeInfo</H3>
<PRE>
public abstract boolean <B>isSameNodeInfo</B>(<A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;other)</PRE>
<DL>
<DD>Determine whether this is the same node as another node
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#isSameNodeInfo(com.icl.saxon.om.NodeInfo)">isSameNodeInfo</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if this Node object and the supplied Node object represent the
 same node in the tree.</DL>
</DD>
</DL>
<HR>

<A NAME="generateId()"><!-- --></A><H3>
generateId</H3>
<PRE>
public abstract java.lang.String <B>generateId</B>()</PRE>
<DL>
<DD>Get a character string that uniquely identifies this node
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#generateId()">generateId</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>a string.</DL>
</DD>
</DL>
<HR>

<A NAME="getSystemId()"><!-- --></A><H3>
getSystemId</H3>
<PRE>
public abstract java.lang.String <B>getSystemId</B>()</PRE>
<DL>
<DD>Get the system ID for the entity containing the node.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getSystemId()">getSystemId</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the System Identifier of the entity in the source document containing the node,
 or null if not known. Note this is not the same as the base URI: the base URI can be
 modified by xml:base, but the system ID cannot.</DL>
</DD>
</DL>
<HR>

<A NAME="getBaseURI()"><!-- --></A><H3>
getBaseURI</H3>
<PRE>
public abstract java.lang.String <B>getBaseURI</B>()</PRE>
<DL>
<DD>Get the base URI for the node. Default implementation for child nodes gets
 the base URI of the parent node.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getBaseURI()">getBaseURI</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getOriginatingNode()"><!-- --></A><H3>
getOriginatingNode</H3>
<PRE>
public org.w3c.dom.Node <B>getOriginatingNode</B>()</PRE>
<DL>
<DD>Get the node corresponding to this javax.xml.transform.dom.DOMLocator
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../javax/xml/transform/dom/DOMLocator.html#getOriginatingNode()">getOriginatingNode</A></CODE> in interface <CODE><A HREF="../../../../javax/xml/transform/dom/DOMLocator.html" title="interface in javax.xml.transform.dom">DOMLocator</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The node that is the location for the event.</DL>
</DD>
</DL>
<HR>

<A NAME="compareOrder(com.icl.saxon.om.NodeInfo)"><!-- --></A><H3>
compareOrder</H3>
<PRE>
public abstract int <B>compareOrder</B>(<A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A>&nbsp;other)</PRE>
<DL>
<DD>Determine the relative position of this node and another node, in document order.
 The other node will always be in the same document.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#compareOrder(com.icl.saxon.om.NodeInfo)">compareOrder</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>other</CODE> - The other node, whose position is to be compared with this node
<DT><B>Returns:</B><DD>-1 if this node precedes the other node, +1 if it follows the other
 node, or 0 if they are the same node. (In this case, isSameNode() will always
 return true, and the two nodes will produce the same result for generateId())</DL>
</DD>
</DL>
<HR>

<A NAME="getNameCode()"><!-- --></A><H3>
getNameCode</H3>
<PRE>
public abstract int <B>getNameCode</B>()</PRE>
<DL>
<DD>Get the name code of the node, used for displaying names
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getNameCode()">getNameCode</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../com/icl/saxon/om/NamePool.html#allocate(java.lang.String, java.lang.String, java.lang.String)"><CODE>allocate</CODE></A>, 
<A HREF="../../../../com/icl/saxon/om/NamePool.html#getFingerprint(int)"><CODE>getFingerprint</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getFingerprint()"><!-- --></A><H3>
getFingerprint</H3>
<PRE>
public abstract int <B>getFingerprint</B>()</PRE>
<DL>
<DD>Get the fingerprint of the node, used for matching names
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getFingerprint()">getFingerprint</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getNodeName()"><!-- --></A><H3>
getNodeName</H3>
<PRE>
public java.lang.String <B>getNodeName</B>()</PRE>
<DL>
<DD>Get the name of this node, following the DOM rules
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getNodeName</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The name of the node. For an element this is the element name, for an attribute
 it is the attribute name, as a QName. Other node types return conventional names such
 as "#text" or "#comment"</DL>
</DD>
</DL>
<HR>

<A NAME="getPrefix()"><!-- --></A><H3>
getPrefix</H3>
<PRE>
public abstract java.lang.String <B>getPrefix</B>()</PRE>
<DL>
<DD>Get the prefix part of the name of this node. This is the name before the ":" if any.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getPrefix</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the prefix part of the name. For an unnamed node, return "".</DL>
</DD>
</DL>
<HR>

<A NAME="getURI()"><!-- --></A><H3>
getURI</H3>
<PRE>
public abstract java.lang.String <B>getURI</B>()</PRE>
<DL>
<DD>Get the URI part of the name of this node. This is the URI corresponding to the
 prefix, or the URI of the default namespace if appropriate.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getURI()">getURI</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The URI of the namespace of this node. For an unnamed node, or for
 an element or attribute in the default namespace, return an empty string.</DL>
</DD>
</DL>
<HR>

<A NAME="getDisplayName()"><!-- --></A><H3>
getDisplayName</H3>
<PRE>
public java.lang.String <B>getDisplayName</B>()</PRE>
<DL>
<DD>Get the display name of this node. For elements and attributes this is [prefix:]localname.
 For unnamed nodes, it is an empty string.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getDisplayName()">getDisplayName</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The display name of this node.
 For a node with no name, return an empty string.</DL>
</DD>
</DL>
<HR>

<A NAME="getLocalName()"><!-- --></A><H3>
getLocalName</H3>
<PRE>
public abstract java.lang.String <B>getLocalName</B>()</PRE>
<DL>
<DD>Get the local name of this node.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getLocalName</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The local name of this node.
 For a node with no name, return an empty string.</DL>
</DD>
</DL>
<HR>

<A NAME="hasChildNodes()"><!-- --></A><H3>
hasChildNodes</H3>
<PRE>
public abstract boolean <B>hasChildNodes</B>()</PRE>
<DL>
<DD>Determine whether the node has any children.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>hasChildNodes</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if this node has any attributes,
   <code>false</code> otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="hasAttributes()"><!-- --></A><H3>
hasAttributes</H3>
<PRE>
public abstract boolean <B>hasAttributes</B>()</PRE>
<DL>
<DD>Returns whether this node has any attributes.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>hasAttributes</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if this node has any attributes,
   <code>false</code> otherwise.<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeValue(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttributeValue</H3>
<PRE>
public abstract java.lang.String <B>getAttributeValue</B>(java.lang.String&nbsp;uri,
                                                   java.lang.String&nbsp;localName)</PRE>
<DL>
<DD>Find the value of a given attribute of this node. <BR>
 This method is defined on all nodes to meet XSL requirements, but for nodes
 other than elements it will always return null.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getAttributeValue(java.lang.String, java.lang.String)">getAttributeValue</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>uri</CODE> - the namespace uri of an attribute<DD><CODE>localName</CODE> - the local name of an attribute
<DT><B>Returns:</B><DD>the value of the attribute, if it exists, otherwise null</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeValue(int)"><!-- --></A><H3>
getAttributeValue</H3>
<PRE>
public abstract java.lang.String <B>getAttributeValue</B>(int&nbsp;fingerprint)</PRE>
<DL>
<DD>Get the value of a given attribute of this node
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getAttributeValue(int)">getAttributeValue</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fingerprint</CODE> - The fingerprint of the attribute name
<DT><B>Returns:</B><DD>the attribute value if it exists or null if not</DL>
</DD>
</DL>
<HR>

<A NAME="getLineNumber()"><!-- --></A><H3>
getLineNumber</H3>
<PRE>
public int <B>getLineNumber</B>()</PRE>
<DL>
<DD>Get the line number of the node within its source document entity.
 The default implementation returns -1, meaning unknown
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getLineNumber()">getLineNumber</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the line number of the node in its original source document; or -1 if not available</DL>
</DD>
</DL>
<HR>

<A NAME="getColumnNumber()"><!-- --></A><H3>
getColumnNumber</H3>
<PRE>
public int <B>getColumnNumber</B>()</PRE>
<DL>
<DD>Get the column number of the node.
 The default implementation returns -1, meaning unknown
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../javax/xml/transform/SourceLocator.html#getColumnNumber()">getColumnNumber</A></CODE> in interface <CODE><A HREF="../../../../javax/xml/transform/SourceLocator.html" title="interface in javax.xml.transform">SourceLocator</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The column number, or -1 if none is available.<DT><B>See Also:</B><DD><A HREF="../../../../javax/xml/transform/SourceLocator.html#getLineNumber()"><CODE>SourceLocator.getLineNumber()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getPublicId()"><!-- --></A><H3>
getPublicId</H3>
<PRE>
public java.lang.String <B>getPublicId</B>()</PRE>
<DL>
<DD>Get the public identifier of the document entity containing this node.
 The default implementation returns null, meaning unknown
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../javax/xml/transform/SourceLocator.html#getPublicId()">getPublicId</A></CODE> in interface <CODE><A HREF="../../../../javax/xml/transform/SourceLocator.html" title="interface in javax.xml.transform">SourceLocator</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>A string containing the public identifier, or
         null if none is available.<DT><B>See Also:</B><DD><A HREF="../../../../javax/xml/transform/SourceLocator.html#getSystemId()"><CODE>SourceLocator.getSystemId()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getEnumeration(byte, com.icl.saxon.pattern.NodeTest)"><!-- --></A><H3>
getEnumeration</H3>
<PRE>
public abstract <A HREF="../../../../com/icl/saxon/om/AxisEnumeration.html" title="interface in com.icl.saxon.om">AxisEnumeration</A> <B>getEnumeration</B>(byte&nbsp;axisNumber,
                                               <A HREF="../../../../com/icl/saxon/pattern/NodeTest.html" title="class in com.icl.saxon.pattern">NodeTest</A>&nbsp;nodeTest)</PRE>
<DL>
<DD>Return an enumeration over the nodes reached by the given axis from this node
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getEnumeration(byte, com.icl.saxon.pattern.NodeTest)">getEnumeration</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>axisNumber</CODE> - The axis to be used (a constant in class <A HREF="../../../../com/icl/saxon/om/Axis.html" title="class in com.icl.saxon.om"><CODE>Axis</CODE></A>)<DD><CODE>nodeTest</CODE> - A pattern to be matched by the returned nodes
<DT><B>Returns:</B><DD>a AxisEnumeration that scans the nodes reached by the axis in turn.</DL>
</DD>
</DL>
<HR>

<A NAME="getParent()"><!-- --></A><H3>
getParent</H3>
<PRE>
public abstract <A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A> <B>getParent</B>()</PRE>
<DL>
<DD>Find the parent node of this node.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getParent()">getParent</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The Node object describing the containing element or root node.</DL>
</DD>
</DL>
<HR>

<A NAME="getDocumentRoot()"><!-- --></A><H3>
getDocumentRoot</H3>
<PRE>
public <A HREF="../../../../com/icl/saxon/om/DocumentInfo.html" title="interface in com.icl.saxon.om">DocumentInfo</A> <B>getDocumentRoot</B>()</PRE>
<DL>
<DD>Get the root (document) node
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#getDocumentRoot()">getDocumentRoot</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the DocumentInfo representing the containing document</DL>
</DD>
</DL>
<HR>

<A NAME="getParentNode()"><!-- --></A><H3>
getParentNode</H3>
<PRE>
public org.w3c.dom.Node <B>getParentNode</B>()</PRE>
<DL>
<DD>Find the parent node of this node (DOM method).
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getParentNode</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The Node object describing the containing element or root node.</DL>
</DD>
</DL>
<HR>

<A NAME="getPreviousSibling()"><!-- --></A><H3>
getPreviousSibling</H3>
<PRE>
public org.w3c.dom.Node <B>getPreviousSibling</B>()</PRE>
<DL>
<DD>Get the previous sibling of the node (DOM method)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getPreviousSibling</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The previous sibling node. Returns null if the current node is the first
 child of its parent.</DL>
</DD>
</DL>
<HR>

<A NAME="getNextSibling()"><!-- --></A><H3>
getNextSibling</H3>
<PRE>
public org.w3c.dom.Node <B>getNextSibling</B>()</PRE>
<DL>
<DD>Get next sibling node (DOM method)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getNextSibling</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The next sibling node. Returns null if the current node is the last
 child of its parent.</DL>
</DD>
</DL>
<HR>

<A NAME="getFirstChild()"><!-- --></A><H3>
getFirstChild</H3>
<PRE>
public org.w3c.dom.Node <B>getFirstChild</B>()</PRE>
<DL>
<DD>Get first child (DOM method)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getFirstChild</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the first child node of this node, or null if it has no children</DL>
</DD>
</DL>
<HR>

<A NAME="getLastChild()"><!-- --></A><H3>
getLastChild</H3>
<PRE>
public org.w3c.dom.Node <B>getLastChild</B>()</PRE>
<DL>
<DD>Get last child (DOM method)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getLastChild</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>last child of this node, or null if it has no children</DL>
</DD>
</DL>
<HR>

<A NAME="getDocumentElement()"><!-- --></A><H3>
getDocumentElement</H3>
<PRE>
public org.w3c.dom.Element <B>getDocumentElement</B>()</PRE>
<DL>
<DD>Get the outermost element. (DOM method)
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the Element for the outermost element of the document. If the document is
 not well-formed, this returns the last element child of the root if there is one, otherwise
 null.</DL>
</DD>
</DL>
<HR>

<A NAME="copyStringValue(com.icl.saxon.output.Outputter)"><!-- --></A><H3>
copyStringValue</H3>
<PRE>
public void <B>copyStringValue</B>(<A HREF="../../../../com/icl/saxon/output/Outputter.html" title="class in com.icl.saxon.output">Outputter</A>&nbsp;out)
                     throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Copy the string-value of this node to a given outputter.
 Default implementation does "out.writeContent(getStringValue());" but it
 is useful to provide an optimized implementation.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#copyStringValue(com.icl.saxon.output.Outputter)">copyStringValue</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="outputNamespaceNodes(com.icl.saxon.output.Outputter, boolean)"><!-- --></A><H3>
outputNamespaceNodes</H3>
<PRE>
public void <B>outputNamespaceNodes</B>(<A HREF="../../../../com/icl/saxon/output/Outputter.html" title="class in com.icl.saxon.output">Outputter</A>&nbsp;out,
                                 boolean&nbsp;includeAncestors)
                          throws <A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></PRE>
<DL>
<DD>Output all namespace nodes associated with this element. Does nothing if
 the node is not an element.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html#outputNamespaceNodes(com.icl.saxon.output.Outputter, boolean)">outputNamespaceNodes</A></CODE> in interface <CODE><A HREF="../../../../com/icl/saxon/om/NodeInfo.html" title="interface in com.icl.saxon.om">NodeInfo</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>out</CODE> - The relevant outputter<DD><CODE>includeAncestors</CODE> - True if namespaces declared on ancestor elements must
 be output; false if it is known that these are already on the result tree
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../javax/xml/transform/TransformerException.html" title="class in javax.xml.transform">TransformerException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getNodeValue()"><!-- --></A><H3>
getNodeValue</H3>
<PRE>
public java.lang.String <B>getNodeValue</B>()</PRE>
<DL>
<DD>Get the node value as defined in the DOM.
 This is not necessarily the same as the XPath string-value.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getNodeValue</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setNodeValue(java.lang.String)"><!-- --></A><H3>
setNodeValue</H3>
<PRE>
public void <B>setNodeValue</B>(java.lang.String&nbsp;nodeValue)
                  throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Set the node value. DOM method: always fails
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>setNodeValue</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getChildNodes()"><!-- --></A><H3>
getChildNodes</H3>
<PRE>
public org.w3c.dom.NodeList <B>getChildNodes</B>()</PRE>
<DL>
<DD>Return a <code>NodeList</code> that contains all children of this node. If
 there are no children, this is a <code>NodeList</code> containing no
 nodes. DOM Method.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getChildNodes</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributes()"><!-- --></A><H3>
getAttributes</H3>
<PRE>
public org.w3c.dom.NamedNodeMap <B>getAttributes</B>()</PRE>
<DL>
<DD>Return a <code>NamedNodeMap</code> containing the attributes of this node (if
 it is an <code>Element</code> ) or <code>null</code> otherwise. (DOM method)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getAttributes</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getOwnerDocument()"><!-- --></A><H3>
getOwnerDocument</H3>
<PRE>
public org.w3c.dom.Document <B>getOwnerDocument</B>()</PRE>
<DL>
<DD>Return the <code>Document</code> object associated with this node. (DOM method)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getOwnerDocument</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="insertBefore(org.w3c.dom.Node, org.w3c.dom.Node)"><!-- --></A><H3>
insertBefore</H3>
<PRE>
public org.w3c.dom.Node <B>insertBefore</B>(org.w3c.dom.Node&nbsp;newChild,
                                     org.w3c.dom.Node&nbsp;refChild)
                              throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Insert the node <code>newChild</code> before the existing child node
 <code>refChild</code>. DOM method: always fails.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>insertBefore</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>newChild</CODE> - The node to insert.<DD><CODE>refChild</CODE> - The reference node, i.e., the node before which the
   new node must be inserted.
<DT><B>Returns:</B><DD>The node being inserted.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Always raised.</DL>
</DD>
</DL>
<HR>

<A NAME="replaceChild(org.w3c.dom.Node, org.w3c.dom.Node)"><!-- --></A><H3>
replaceChild</H3>
<PRE>
public org.w3c.dom.Node <B>replaceChild</B>(org.w3c.dom.Node&nbsp;newChild,
                                     org.w3c.dom.Node&nbsp;oldChild)
                              throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Replace the child node <code>oldChild</code> with
 <code>newChild</code> in the list of children, and returns the
 <code>oldChild</code> node. Always fails.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>replaceChild</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>newChild</CODE> - The new node to put in the child list.<DD><CODE>oldChild</CODE> - The node being replaced in the list.
<DT><B>Returns:</B><DD>The node replaced.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Always raised.</DL>
</DD>
</DL>
<HR>

<A NAME="removeChild(org.w3c.dom.Node)"><!-- --></A><H3>
removeChild</H3>
<PRE>
public org.w3c.dom.Node <B>removeChild</B>(org.w3c.dom.Node&nbsp;oldChild)
                             throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Remove the child node indicated by <code>oldChild</code> from the
 list of children, and returns it. DOM method: always fails.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>removeChild</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oldChild</CODE> - The node being removed.
<DT><B>Returns:</B><DD>The node removed.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Always raised.</DL>
</DD>
</DL>
<HR>

<A NAME="appendChild(org.w3c.dom.Node)"><!-- --></A><H3>
appendChild</H3>
<PRE>
public org.w3c.dom.Node <B>appendChild</B>(org.w3c.dom.Node&nbsp;newChild)
                             throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Adds the node <code>newChild</code> to the end of the list of children
 of this node. DOM method: always fails.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>appendChild</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>newChild</CODE> - The node to add.
<DT><B>Returns:</B><DD>The node added.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - <br> NO_MODIFICATION_ALLOWED_ERR: Always raised.</DL>
</DD>
</DL>
<HR>

<A NAME="cloneNode(boolean)"><!-- --></A><H3>
cloneNode</H3>
<PRE>
public org.w3c.dom.Node <B>cloneNode</B>(boolean&nbsp;deep)</PRE>
<DL>
<DD>Returns a duplicate of this node, i.e., serves as a generic copy
 constructor for nodes. The duplicate node has no parent. Not
 implemented: always returns null. (Because trees are read-only, there
 would be no way of using the resulting node.)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>cloneNode</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>deep</CODE> - If <code>true</code> , recursively clone the subtree under
   the specified node; if <code>false</code> , clone only the node
   itself (and its attributes, if it is an <code>Element</code> ).
<DT><B>Returns:</B><DD>The duplicate node.</DL>
</DD>
</DL>
<HR>

<A NAME="normalize()"><!-- --></A><H3>
normalize</H3>
<PRE>
public void <B>normalize</B>()</PRE>
<DL>
<DD>Puts all <code>Text</code> nodes in the full depth of the sub-tree
 underneath this <code>Node</code>, including attribute nodes, into a
 "normal" form where only structure (e.g., elements, comments,
 processing instructions, CDATA sections, and entity references)
 separates <code>Text</code> nodes, i.e., there are neither adjacent
 <code>Text</code> nodes nor empty <code>Text</code> nodes.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>normalize</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isSupported(java.lang.String, java.lang.String)"><!-- --></A><H3>
isSupported</H3>
<PRE>
public boolean <B>isSupported</B>(java.lang.String&nbsp;feature,
                           java.lang.String&nbsp;version)</PRE>
<DL>
<DD>Tests whether the DOM implementation implements a specific feature and
 that feature is supported by this node.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>isSupported</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>feature</CODE> - The name of the feature to test. This is the same name
   which can be passed to the method <code>hasFeature</code> on
   <code>DOMImplementation</code> .<DD><CODE>version</CODE> - This is the version number of the feature to test. In
   Level 2, version 1, this is the string "2.0". If the version is not
   specified, supporting any version of the feature will cause the
   method to return <code>true</code> .
<DT><B>Returns:</B><DD>Returns <code>true</code> if the specified feature is supported
    on this node, <code>false</code> otherwise.<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="supports(java.lang.String, java.lang.String)"><!-- --></A><H3>
supports</H3>
<PRE>
public boolean <B>supports</B>(java.lang.String&nbsp;feature,
                        java.lang.String&nbsp;version)</PRE>
<DL>
<DD>Alternative to isSupported(), defined in a draft DOM spec
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getNamespaceURI()"><!-- --></A><H3>
getNamespaceURI</H3>
<PRE>
public java.lang.String <B>getNamespaceURI</B>()</PRE>
<DL>
<DD>The namespace URI of this node, or <code>null</code> if it is
 unspecified. DOM method.
 <br> This is not a computed value that is the result of a namespace
 lookup based on an examination of the namespace declarations in scope.
 It is merely the namespace URI given at creation time.
 <br> For nodes of any type other than <code>ELEMENT_NODE</code> and
 <code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1
 method, such as <code>createElement</code> from the
 <code>Document</code> interface, this is always <code>null</code> .
 Per the  Namespaces in XML Specification  an attribute does not
 inherit its namespace from the element it is attached to. If an
 attribute is not explicitly given a namespace, it simply has no
 namespace.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getNamespaceURI</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setPrefix(java.lang.String)"><!-- --></A><H3>
setPrefix</H3>
<PRE>
public void <B>setPrefix</B>(java.lang.String&nbsp;prefix)
               throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Set the namespace prefix of this node. Always fails.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>setPrefix</CODE> in interface <CODE>org.w3c.dom.Node</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="disallowUpdate()"><!-- --></A><H3>
disallowUpdate</H3>
<PRE>
protected void <B>disallowUpdate</B>()
                       throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Internal method used to indicate that update operations are not allowed
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getDoctype()"><!-- --></A><H3>
getDoctype</H3>
<PRE>
public org.w3c.dom.DocumentType <B>getDoctype</B>()</PRE>
<DL>
<DD>Get the Document Type Declaration (see <code>DocumentType</code> )
 associated with this document. For HTML documents as well as XML
 documents without a document type declaration this returns
 <code>null</code>. DOM method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>null: The Saxon tree model does not include the document type
 information.</DL>
</DD>
</DL>
<HR>

<A NAME="getImplementation()"><!-- --></A><H3>
getImplementation</H3>
<PRE>
public org.w3c.dom.DOMImplementation <B>getImplementation</B>()</PRE>
<DL>
<DD>Get a <code>DOMImplementation</code> object that handles this document.
 A DOM application may use objects from multiple implementations.
 DOM method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="createElement(java.lang.String)"><!-- --></A><H3>
createElement</H3>
<PRE>
public org.w3c.dom.Element <B>createElement</B>(java.lang.String&nbsp;tagName)
                                  throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Creates an element of the type specified. DOM method: always fails,
 because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="createDocumentFragment()"><!-- --></A><H3>
createDocumentFragment</H3>
<PRE>
public org.w3c.dom.DocumentFragment <B>createDocumentFragment</B>()</PRE>
<DL>
<DD>Creates an empty <code>DocumentFragment</code> object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>A new <code>DocumentFragment</code> .
 DOM method: returns null, because the Saxon tree is not updateable.</DL>
</DD>
</DL>
<HR>

<A NAME="createTextNode(java.lang.String)"><!-- --></A><H3>
createTextNode</H3>
<PRE>
public org.w3c.dom.Text <B>createTextNode</B>(java.lang.String&nbsp;data)</PRE>
<DL>
<DD>Create a <code>Text</code> node given the specified string.
 DOM method: returns null, because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>data</CODE> - The data for the node.
<DT><B>Returns:</B><DD>The new <code>Text</code> object.</DL>
</DD>
</DL>
<HR>

<A NAME="createComment(java.lang.String)"><!-- --></A><H3>
createComment</H3>
<PRE>
public org.w3c.dom.Comment <B>createComment</B>(java.lang.String&nbsp;data)</PRE>
<DL>
<DD>Create a <code>Comment</code> node given the specified string.
 DOM method: returns null, because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>data</CODE> - The data for the node.
<DT><B>Returns:</B><DD>The new <code>Comment</code> object.</DL>
</DD>
</DL>
<HR>

<A NAME="createCDATASection(java.lang.String)"><!-- --></A><H3>
createCDATASection</H3>
<PRE>
public org.w3c.dom.CDATASection <B>createCDATASection</B>(java.lang.String&nbsp;data)
                                            throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Create a <code>CDATASection</code> node whose value  is the specified
 string.
 DOM method: always fails, because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>data</CODE> - The data for the <code>CDATASection</code> contents.
<DT><B>Returns:</B><DD>The new <code>CDATASection</code> object.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NOT_SUPPORTED_ERR: Raised if this document is an HTML document.</DL>
</DD>
</DL>
<HR>

<A NAME="createProcessingInstruction(java.lang.String, java.lang.String)"><!-- --></A><H3>
createProcessingInstruction</H3>
<PRE>
public org.w3c.dom.ProcessingInstruction <B>createProcessingInstruction</B>(java.lang.String&nbsp;target,
                                                                     java.lang.String&nbsp;data)
                                                              throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Create a <code>ProcessingInstruction</code> node given the specified
 name and data strings.
 DOM method: returns null, because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>target</CODE> - The target part of the processing instruction.<DD><CODE>data</CODE> - The data for the node.
<DT><B>Returns:</B><DD>The new <code>ProcessingInstruction</code> object.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - INVALID_CHARACTER_ERR: Raised if the specified target contains an
   illegal character.
   <br> NOT_SUPPORTED_ERR: Raised if this document is an HTML document.</DL>
</DD>
</DL>
<HR>

<A NAME="createAttribute(java.lang.String)"><!-- --></A><H3>
createAttribute</H3>
<PRE>
public org.w3c.dom.Attr <B>createAttribute</B>(java.lang.String&nbsp;name)
                                 throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Create an <code>Attr</code> of the given name.
 DOM method: always fails, because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the attribute.
<DT><B>Returns:</B><DD>A new <code>Attr</code> object with the <code>nodeName</code>
   attribute set to <code>name</code> , and <code>localName</code> ,
   <code>prefix</code> , and <code>namespaceURI</code> set to
   <code>null</code> .
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - INVALID_CHARACTER_ERR: Raised if the specified name contains an
   illegal character.</DL>
</DD>
</DL>
<HR>

<A NAME="createEntityReference(java.lang.String)"><!-- --></A><H3>
createEntityReference</H3>
<PRE>
public org.w3c.dom.EntityReference <B>createEntityReference</B>(java.lang.String&nbsp;name)
                                                  throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Create an <code>EntityReference</code> object.
 DOM method: returns null, because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the entity to reference.
<DT><B>Returns:</B><DD>The new <code>EntityReference</code> object.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - INVALID_CHARACTER_ERR: Raised if the specified name contains an
   illegal character.
   <br> NOT_SUPPORTED_ERR: Raised if this document is an HTML document.</DL>
</DD>
</DL>
<HR>

<A NAME="getElementsByTagName(java.lang.String)"><!-- --></A><H3>
getElementsByTagName</H3>
<PRE>
public org.w3c.dom.NodeList <B>getElementsByTagName</B>(java.lang.String&nbsp;tagname)</PRE>
<DL>
<DD>Return a <code>NodeList</code> of all the <code>Elements</code> with
 a given tag name in the order in which they are encountered in a
 preorder traversal of the <code>Document</code> tree.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>tagname</CODE> - The name of the tag to match on. The special value "*"
   matches all tags.
<DT><B>Returns:</B><DD>A new <code>NodeList</code> object containing all the matched
   <code>Elements</code> .</DL>
</DD>
</DL>
<HR>

<A NAME="importNode(org.w3c.dom.Node, boolean)"><!-- --></A><H3>
importNode</H3>
<PRE>
public org.w3c.dom.Node <B>importNode</B>(org.w3c.dom.Node&nbsp;importedNode,
                                   boolean&nbsp;deep)
                            throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Import a node from another document to this document.
 DOM method: always fails, because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE><DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="createElementNS(java.lang.String, java.lang.String)"><!-- --></A><H3>
createElementNS</H3>
<PRE>
public org.w3c.dom.Element <B>createElementNS</B>(java.lang.String&nbsp;namespaceURI,
                                           java.lang.String&nbsp;qualifiedName)
                                    throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Create an element of the given qualified name and namespace URI.
 HTML-only DOM implementations do not need to implement this method.
 DOM method: always fails, because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The  namespace URI of the element to create.<DD><CODE>qualifiedName</CODE> - The  qualified name of the element type to
   instantiate.
<DT><B>Returns:</B><DD>A new <code>Element</code> object
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="createAttributeNS(java.lang.String, java.lang.String)"><!-- --></A><H3>
createAttributeNS</H3>
<PRE>
public org.w3c.dom.Attr <B>createAttributeNS</B>(java.lang.String&nbsp;namespaceURI,
                                          java.lang.String&nbsp;qualifiedName)
                                   throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Create an attribute of the given qualified name and namespace URI.
 HTML-only DOM implementations do not need to implement this method.
 DOM method: returns null, because the Saxon tree is not updateable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The  namespace URI of the attribute to create.<DD><CODE>qualifiedName</CODE> - The  qualified name of the attribute to
   instantiate.
<DT><B>Returns:</B><DD>A new <code>Attr</code> object.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getElementsByTagNameNS(java.lang.String, java.lang.String)"><!-- --></A><H3>
getElementsByTagNameNS</H3>
<PRE>
public org.w3c.dom.NodeList <B>getElementsByTagNameNS</B>(java.lang.String&nbsp;namespaceURI,
                                                   java.lang.String&nbsp;localName)</PRE>
<DL>
<DD>Return a <code>NodeList</code> of all the <code>Elements</code> with
 a given  local name and namespace URI in the order in which they are
 encountered in a preorder traversal of the <code>Document</code> tree.
 DOM method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The  namespace URI of the elements to match on.
   The special value "*" matches all namespaces.<DD><CODE>localName</CODE> - The  local name of the elements to match on. The
   special value "*" matches all local names.
<DT><B>Returns:</B><DD>A new <code>NodeList</code> object containing all the matched
   <code>Elements</code> .<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getElementById(java.lang.String)"><!-- --></A><H3>
getElementById</H3>
<PRE>
public org.w3c.dom.Element <B>getElementById</B>(java.lang.String&nbsp;elementId)</PRE>
<DL>
<DD>Return the <code>Element</code> whose <code>ID</code> is given by
 <code>elementId</code> . If no such element exists, returns
 <code>null</code> . Behavior is not defined if more than one element
 has this <code>ID</code> .  The DOM implementation must have
 information that says which attributes are of type ID. Attributes with
 the name "ID" are not of type ID unless so defined. Implementations
 that do not know whether attributes are of type ID or not are expected
 to return <code>null</code> .
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>elementId</CODE> - The unique <code>id</code> value for an element.
<DT><B>Returns:</B><DD>The matching element, or null if there is none.<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTagName()"><!-- --></A><H3>
getTagName</H3>
<PRE>
public java.lang.String <B>getTagName</B>()</PRE>
<DL>
<DD>The name of the element (DOM interface).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAttribute(java.lang.String)"><!-- --></A><H3>
getAttribute</H3>
<PRE>
public java.lang.String <B>getAttribute</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Retrieves an attribute value by name. Namespace declarations will not
 be retrieved. DOM interface.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The QName of the attribute to retrieve.
<DT><B>Returns:</B><DD>The <code>Attr</code> value as a string, or the empty string if
    that attribute does not have a specified or default value.</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeNode(java.lang.String)"><!-- --></A><H3>
getAttributeNode</H3>
<PRE>
public org.w3c.dom.Attr <B>getAttributeNode</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Retrieves an attribute node by name.
 Namespace declarations will not be retrieved.
 <br> To retrieve an attribute node by qualified name and namespace URI,
 use the <code>getAttributeNodeNS</code> method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name (<code>nodeName</code> ) of the attribute to
   retrieve.
<DT><B>Returns:</B><DD>The <code>Attr</code> node with the specified name (
   <code>nodeName</code> ) or <code>null</code> if there is no such
   attribute.</DL>
</DD>
</DL>
<HR>

<A NAME="setAttributeNode(org.w3c.dom.Attr)"><!-- --></A><H3>
setAttributeNode</H3>
<PRE>
public org.w3c.dom.Attr <B>setAttributeNode</B>(org.w3c.dom.Attr&nbsp;newAttr)
                                  throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Adds a new attribute node. Always fails
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</DL>
</DD>
</DL>
<HR>

<A NAME="removeAttribute(java.lang.String)"><!-- --></A><H3>
removeAttribute</H3>
<PRE>
public void <B>removeAttribute</B>(java.lang.String&nbsp;oldAttr)
                     throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Removes the specified attribute. Always fails
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</DL>
</DD>
</DL>
<HR>

<A NAME="removeAttributeNode(org.w3c.dom.Attr)"><!-- --></A><H3>
removeAttributeNode</H3>
<PRE>
public org.w3c.dom.Attr <B>removeAttributeNode</B>(org.w3c.dom.Attr&nbsp;oldAttr)
                                     throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Removes the specified attribute node. Always fails
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeNS(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttributeNS</H3>
<PRE>
public java.lang.String <B>getAttributeNS</B>(java.lang.String&nbsp;namespaceURI,
                                       java.lang.String&nbsp;localName)</PRE>
<DL>
<DD>Retrieves an attribute value by local name and namespace URI.
 HTML-only DOM implementations do not need to implement this method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The  namespace URI of the attribute to retrieve.<DD><CODE>localName</CODE> - The  local name of the attribute to retrieve.
<DT><B>Returns:</B><DD>The <code>Attr</code> value as a string, or the empty string if
    that attribute does not have a specified or default value.<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setAttributeNS(java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
setAttributeNS</H3>
<PRE>
public void <B>setAttributeNS</B>(java.lang.String&nbsp;namespaceURI,
                           java.lang.String&nbsp;qualifiedName,
                           java.lang.String&nbsp;value)
                    throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Adds a new attribute. Always fails.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The  namespace URI of the attribute to create or
   alter.<DD><CODE>qualifiedName</CODE> - The  qualified name of the attribute to create or
   alter.<DD><CODE>value</CODE> - The value to set in string form.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</DL>
</DD>
</DL>
<HR>

<A NAME="removeAttributeNS(java.lang.String, java.lang.String)"><!-- --></A><H3>
removeAttributeNS</H3>
<PRE>
public void <B>removeAttributeNS</B>(java.lang.String&nbsp;namespaceURI,
                              java.lang.String&nbsp;localName)
                       throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Removes an attribute by local name and namespace URI. Always fails
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeNodeNS(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttributeNodeNS</H3>
<PRE>
public org.w3c.dom.Attr <B>getAttributeNodeNS</B>(java.lang.String&nbsp;namespaceURI,
                                           java.lang.String&nbsp;localName)</PRE>
<DL>
<DD>Retrieves an <code>Attr</code> node by local name and namespace URI.
 DOM method, so namespace declarations count as attributes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The  namespace URI of the attribute to retrieve.<DD><CODE>localName</CODE> - The  local name of the attribute to retrieve.
<DT><B>Returns:</B><DD>The <code>Attr</code> node with the specified attribute local
   name and namespace URI or <code>null</code> if there is no such
   attribute.<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setAttributeNodeNS(org.w3c.dom.Attr)"><!-- --></A><H3>
setAttributeNodeNS</H3>
<PRE>
public org.w3c.dom.Attr <B>setAttributeNodeNS</B>(org.w3c.dom.Attr&nbsp;newAttr)
                                    throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Add a new attribute. Always fails.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>newAttr</CODE> - The <code>Attr</code> node to add to the attribute list.
<DT><B>Returns:</B><DD>If the <code>newAttr</code> attribute replaces an existing
   attribute with the same  local name and  namespace URI , the
   replaced <code>Attr</code> node is returned, otherwise
   <code>null</code> is returned.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - <br> NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasAttribute(java.lang.String)"><!-- --></A><H3>
hasAttribute</H3>
<PRE>
public boolean <B>hasAttribute</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Returns <code>true</code> when an attribute with a given name is
 specified on this element or has a default value, <code>false</code>
 otherwise.
 Namespace declarations will not be retrieved.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the attribute to look for.
<DT><B>Returns:</B><DD><code>true</code> if an attribute with the given name is
   specified on this element or has a default value, <code>false</code>
   otherwise.<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasAttributeNS(java.lang.String, java.lang.String)"><!-- --></A><H3>
hasAttributeNS</H3>
<PRE>
public boolean <B>hasAttributeNS</B>(java.lang.String&nbsp;namespaceURI,
                              java.lang.String&nbsp;localName)</PRE>
<DL>
<DD>Returns <code>true</code> when an attribute with a given local name
 and namespace URI is specified on this element or has a default value,
 <code>false</code> otherwise.
 Namespace declarations will not be retrieved.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The  namespace URI of the attribute to look for.<DD><CODE>localName</CODE> - The  local name of the attribute to look for.
<DT><B>Returns:</B><DD><code>true</code> if an attribute with the given local name and
   namespace URI is specified or has a default value on this element,
   <code>false</code> otherwise.<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getData()"><!-- --></A><H3>
getData</H3>
<PRE>
public java.lang.String <B>getData</B>()</PRE>
<DL>
<DD>Get the character data of a Text or Comment node.
 DOM method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setData(java.lang.String)"><!-- --></A><H3>
setData</H3>
<PRE>
public void <B>setData</B>(java.lang.String&nbsp;data)
             throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Set the character data of a Text or Comment node.
 DOM method: always fails, Saxon tree is immutable.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getLength()"><!-- --></A><H3>
getLength</H3>
<PRE>
public int <B>getLength</B>()</PRE>
<DL>
<DD>Get the length of a Text or Comment node.
 DOM method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="substringData(int, int)"><!-- --></A><H3>
substringData</H3>
<PRE>
public java.lang.String <B>substringData</B>(int&nbsp;offset,
                                      int&nbsp;count)
                               throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Extract a range of data from a Text or Comment node. DOM method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>offset</CODE> - Start offset of substring to extract.<DD><CODE>count</CODE> - The number of 16-bit units to extract.
<DT><B>Returns:</B><DD>The specified substring. If the sum of <code>offset</code> and
   <code>count</code> exceeds the <code>length</code> , then all 16-bit
   units to the end of the data are returned.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is
   negative or greater than the number of 16-bit units in
   <code>data</code> , or if the specified <code>count</code> is
   negative.</DL>
</DD>
</DL>
<HR>

<A NAME="appendData(java.lang.String)"><!-- --></A><H3>
appendData</H3>
<PRE>
public void <B>appendData</B>(java.lang.String&nbsp;arg)
                throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Append the string to the end of the character data of the node.
 DOM method: always fails.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>arg</CODE> - The <code>DOMString</code> to append.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</DL>
</DD>
</DL>
<HR>

<A NAME="insertData(int, java.lang.String)"><!-- --></A><H3>
insertData</H3>
<PRE>
public void <B>insertData</B>(int&nbsp;offset,
                       java.lang.String&nbsp;arg)
                throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Insert a string at the specified character offset.
 DOM method: always fails.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>offset</CODE> - The character offset at which to insert.<DD><CODE>arg</CODE> - The <code>DOMString</code> to insert.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="deleteData(int, int)"><!-- --></A><H3>
deleteData</H3>
<PRE>
public void <B>deleteData</B>(int&nbsp;offset,
                       int&nbsp;count)
                throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Remove a range of 16-bit units from the node.
 DOM method: always fails.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>offset</CODE> - The offset from which to start removing.<DD><CODE>count</CODE> - The number of 16-bit units to delete.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="replaceData(int, int, java.lang.String)"><!-- --></A><H3>
replaceData</H3>
<PRE>
public void <B>replaceData</B>(int&nbsp;offset,
                        int&nbsp;count,
                        java.lang.String&nbsp;arg)
                 throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Replace the characters starting at the specified 16-bit unit offset
 with the specified string. DOM method: always fails.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>offset</CODE> - The offset from which to start replacing.<DD><CODE>count</CODE> - The number of 16-bit units to replace.<DD><CODE>arg</CODE> - The <code>DOMString</code> with which the range must be
   replaced.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</DL>
</DD>
</DL>
<HR>

<A NAME="splitText(int)"><!-- --></A><H3>
splitText</H3>
<PRE>
public org.w3c.dom.Text <B>splitText</B>(int&nbsp;offset)
                           throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Break this node into two nodes at the specified offset,
 keeping both in the tree as siblings. DOM method, always fails.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>offset</CODE> - The 16-bit unit offset at which to split, starting from 0.
<DT><B>Returns:</B><DD>The new node, of the same type as this node.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getName()"><!-- --></A><H3>
getName</H3>
<PRE>
public java.lang.String <B>getName</B>()</PRE>
<DL>
<DD>Get the name of an attribute node (the QName) (DOM method)
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getValue()"><!-- --></A><H3>
getValue</H3>
<PRE>
public java.lang.String <B>getValue</B>()</PRE>
<DL>
<DD>Return the character value of an attribute node (DOM method)
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the attribute value</DL>
</DD>
</DL>
<HR>

<A NAME="getSpecified()"><!-- --></A><H3>
getSpecified</H3>
<PRE>
public boolean <B>getSpecified</B>()</PRE>
<DL>
<DD>If this attribute was explicitly given a value in the original
 document, this is <code>true</code> ; otherwise, it is
 <code>false</code>. (DOM method)
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Always true in this implementation.</DL>
</DD>
</DL>
<HR>

<A NAME="setValue(java.lang.String)"><!-- --></A><H3>
setValue</H3>
<PRE>
public void <B>setValue</B>(java.lang.String&nbsp;value)
              throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Set the value of an attribute node. (DOM method).
 Always fails (because tree is readonly)
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getOwnerElement()"><!-- --></A><H3>
getOwnerElement</H3>
<PRE>
public org.w3c.dom.Element <B>getOwnerElement</B>()</PRE>
<DL>
<DD>The <code>Element</code> node this attribute is attached to or
 <code>null</code> if this attribute is not in use.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>DOM Level 2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSchemaTypeInfo()"><!-- --></A><H3>
getSchemaTypeInfo</H3>
<PRE>
public org.w3c.dom.TypeInfo <B>getSchemaTypeInfo</B>()</PRE>
<DL>
<DD>The type information associated with this attribute. While the type
 information contained in this attribute is guarantee to be correct
 after loading the document or invoking
 <code>Document.normalizeDocument()</code>, <code>schemaTypeInfo</code>
 may not be reliable if the node was moved.
 <p>
 This implementation always returns null;
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isId()"><!-- --></A><H3>
isId</H3>
<PRE>
public boolean <B>isId</B>()</PRE>
<DL>
<DD>Returns whether this attribute is known to be of type ID (i.e. to
 contain an identifier for its owner element) or not.
 <p>
 This implementation always returns false.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="compareDocumentPosition(org.w3c.dom.Node)"><!-- --></A><H3>
compareDocumentPosition</H3>
<PRE>
public short <B>compareDocumentPosition</B>(org.w3c.dom.Node&nbsp;other)
                              throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Compares the reference node, i.e. the node on which this method is
 being called, with a node, i.e. the one passed as a parameter, with
 regard to their position in the document and according to the
 document order.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>other</CODE> - The node to compare against the reference node.
<DT><B>Returns:</B><DD>Returns how the node is positioned relatively to the reference
         node.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NOT_SUPPORTED_ERR: when the compared nodes are from different DOM
                                  implementations that do not coordinate to return consistent
                                  implementation-specific results.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getFeature(java.lang.String, java.lang.String)"><!-- --></A><H3>
getFeature</H3>
<PRE>
public java.lang.Object <B>getFeature</B>(java.lang.String&nbsp;feature,
                                   java.lang.String&nbsp;version)</PRE>
<DL>
<DD>This method returns a specialized object which implements the
 specialized APIs of the specified feature and version, as specified
 in . The specialized object may also be obtained by using
 binding-specific casting methods but is not necessarily expected to,
 as discussed in . This method also allow the implementation to
 provide specialized objects which do not support the <code>Node</code>
 interface.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>feature</CODE> - The name of the feature requested. Note that any plus
                sign "+" prepended to the name of the feature will be ignored since
                it is not significant in the context of this method.<DD><CODE>version</CODE> - This is the version number of the feature to test.
<DT><B>Returns:</B><DD>Returns an object which implements the specialized APIs of
         the specified feature and version, if any, or <code>null</code> if
         there is no object which implements interfaces associated with that
         feature. If the <code>DOMObject</code> returned by this method
         implements the <code>Node</code> interface, it must delegate to the
         primary core <code>Node</code> and not return results inconsistent
         with the primary core <code>Node</code> such as attributes,
         childNodes, etc.
 <p>
 The Saxon implementation of this method always returns null<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTextContent()"><!-- --></A><H3>
getTextContent</H3>
<PRE>
public java.lang.String <B>getTextContent</B>()
                                throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>This attribute returns the text content of this node and its
 descendants. When it is defined to be <code>null</code>, setting it
 has no effect. On setting, any possible children this node may have
 are removed and, if it the new string is not empty or
 <code>null</code>, replaced by a single <code>Text</code> node
 containing the string this attribute is set to.
 <br> On getting, no serialization is performed, the returned string
 does not contain any markup. No whitespace normalization is performed
 and the returned string does not contain the white spaces in element
 content (see the attribute
 <code>Text.isElementContentWhitespace</code>). Similarly, on setting,
 no parsing is performed either, the input string is taken as pure
 textual content.
 <br>The string returned is made of the text content of this node
 depending on its type, as defined below:
 <table border='1' cellpadding='3'>
 <tr>
 <th>Node type</th>
 <th>Content</th>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
 ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
 DOCUMENT_FRAGMENT_NODE</td>
 <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
 attribute value of every child node, excluding COMMENT_NODE and
 PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the
 node has no children.</td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE,
 PROCESSING_INSTRUCTION_NODE</td>
 <td valign='top' rowspan='1' colspan='1'><code>nodeValue</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE,
 DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
 <td valign='top' rowspan='1' colspan='1'><em>null</em></td>
 </tr>
 </table>

 <p>The Saxon implementation returns the same result as getStringValue()
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - DOMSTRING_SIZE_ERR: Raised when it would return more characters than
                                  fit in a <code>DOMString</code> variable on the implementation
                                  platform.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getUserData(java.lang.String)"><!-- --></A><H3>
getUserData</H3>
<PRE>
public java.lang.Object <B>getUserData</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Retrieves the object associated to a key on a this node. The object
 must first have been set to this node by calling
 <code>setUserData</code> with the same key.

 <p>The Saxon implementation always returns null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - The key the object is associated to.
<DT><B>Returns:</B><DD>Returns the <code>DOMUserData</code> associated to the given
         key on this node, or <code>null</code> if there was none.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isDefaultNamespace(java.lang.String)"><!-- --></A><H3>
isDefaultNamespace</H3>
<PRE>
public boolean <B>isDefaultNamespace</B>(java.lang.String&nbsp;namespaceURI)</PRE>
<DL>
<DD>This method checks if the specified <code>namespaceURI</code> is the
 default namespace or not.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The namespace URI to look for.
<DT><B>Returns:</B><DD>Returns <code>true</code> if the specified
         <code>namespaceURI</code> is the default namespace,
         <code>false</code> otherwise.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isEqualNode(org.w3c.dom.Node)"><!-- --></A><H3>
isEqualNode</H3>
<PRE>
public boolean <B>isEqualNode</B>(org.w3c.dom.Node&nbsp;arg)</PRE>
<DL>
<DD>Tests whether two nodes are equal.
 <br>This method tests for equality of nodes, not sameness (i.e.,
 whether the two nodes are references to the same object) which can be
 tested with <code>Node.isSameNode()</code>. All nodes that are the
 same will also be equal, though the reverse may not be true.
 <br>Two nodes are equal if and only if the following conditions are
 satisfied:
 <ul>
 <li>The two nodes are of the same type.
 </li>
 <li>The following string
 attributes are equal: <code>nodeName</code>, <code>localName</code>,
 <code>namespaceURI</code>, <code>prefix</code>, <code>nodeValue</code>
 . This is: they are both <code>null</code>, or they have the same
 length and are character for character identical.
 </li>
 <li>The
 <code>attributes</code> <code>NamedNodeMaps</code> are equal. This
 is: they are both <code>null</code>, or they have the same length and
 for each node that exists in one map there is a node that exists in
 the other map and is equal, although not necessarily at the same
 index.
 </li>
 <li>The <code>childNodes</code> <code>NodeLists</code> are equal.
 This is: they are both <code>null</code>, or they have the same
 length and contain equal nodes at the same index. Note that
 normalization can affect equality; to avoid this, nodes should be
 normalized before being compared.
 </li>
 </ul>
 <br>For two <code>DocumentType</code> nodes to be equal, the following
 conditions must also be satisfied:
 <ul>
 <li>The following string attributes
 are equal: <code>publicId</code>, <code>systemId</code>,
 <code>internalSubset</code>.
 </li>
 <li>The <code>entities</code>
 <code>NamedNodeMaps</code> are equal.
 </li>
 <li>The <code>notations</code>
 <code>NamedNodeMaps</code> are equal.
 </li>
 </ul>
 <br>On the other hand, the following do not affect equality: the
 <code>ownerDocument</code>, <code>baseURI</code>, and
 <code>parentNode</code> attributes, the <code>specified</code>
 attribute for <code>Attr</code> nodes, the <code>schemaTypeInfo</code>
 attribute for <code>Attr</code> and <code>Element</code> nodes, the
 <code>Text.isElementContentWhitespace</code> attribute for
 <code>Text</code> nodes, as well as any user data or event listeners
 registered on the nodes.
 <p ><b>Note:</b>  As a general rule, anything not mentioned in the
 description above is not significant in consideration of equality
 checking. Note that future versions of this specification may take
 into account more attributes and implementations conform to this
 specification are expected to be updated accordingly.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>arg</CODE> - The node to compare equality with.
<DT><B>Returns:</B><DD>Returns <code>true</code> if the nodes are equal,
         <code>false</code> otherwise.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isSameNode(org.w3c.dom.Node)"><!-- --></A><H3>
isSameNode</H3>
<PRE>
public boolean <B>isSameNode</B>(org.w3c.dom.Node&nbsp;other)</PRE>
<DL>
<DD>Returns whether this node is the same node as the given one.
 <br>This method provides a way to determine whether two
 <code>Node</code> references returned by the implementation reference
 the same object. When two <code>Node</code> references are references
 to the same object, even if through a proxy, the references may be
 used completely interchangeably, such that all attributes have the
 same values and calling the same DOM method on either reference
 always has exactly the same effect.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>other</CODE> - The node to test against.
<DT><B>Returns:</B><DD>Returns <code>true</code> if the nodes are the same,
         <code>false</code> otherwise.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="lookupNamespaceURI(java.lang.String)"><!-- --></A><H3>
lookupNamespaceURI</H3>
<PRE>
public java.lang.String <B>lookupNamespaceURI</B>(java.lang.String&nbsp;prefix)</PRE>
<DL>
<DD>Look up the namespace URI associated to the given prefix, starting from
 this node.
 <br>See  for details on the algorithm used by this method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>prefix</CODE> - The prefix to look for. If this parameter is
               <code>null</code>, the method will return the default namespace URI
               if any.
<DT><B>Returns:</B><DD>Returns the associated namespace URI or <code>null</code> if
         none is found.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="lookupPrefix(java.lang.String)"><!-- --></A><H3>
lookupPrefix</H3>
<PRE>
public java.lang.String <B>lookupPrefix</B>(java.lang.String&nbsp;namespaceURI)</PRE>
<DL>
<DD>Look up the prefix associated to the given namespace URI, starting from
 this node. The default namespace declarations are ignored by this
 method.
 <br>See  for details on the algorithm used by this method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The namespace URI to look for.
<DT><B>Returns:</B><DD>Returns an associated namespace prefix if found or
         <code>null</code> if none is found. If more than one prefix are
         associated to the namespace prefix, the returned namespace prefix
         is implementation dependent.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setTextContent(java.lang.String)"><!-- --></A><H3>
setTextContent</H3>
<PRE>
public void <B>setTextContent</B>(java.lang.String&nbsp;textContent)
                    throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>This attribute returns the text content of this node and its
 descendants. When it is defined to be <code>null</code>, setting it
 has no effect. On setting, any possible children this node may have
 are removed and, if it the new string is not empty or
 <code>null</code>, replaced by a single <code>Text</code> node
 containing the string this attribute is set to.
 <br> On getting, no serialization is performed, the returned string
 does not contain any markup. No whitespace normalization is performed
 and the returned string does not contain the white spaces in element
 content (see the attribute
 <code>Text.isElementContentWhitespace</code>). Similarly, on setting,
 no parsing is performed either, the input string is taken as pure
 textual content.
 <br>The string returned is made of the text content of this node
 depending on its type, as defined below:
 <table border='1' cellpadding='3'>
 <tr>
 <th>Node type</th>
 <th>Content</th>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>
 ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
 DOCUMENT_FRAGMENT_NODE</td>
 <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
 attribute value of every child node, excluding COMMENT_NODE and
 PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the
 node has no children.</td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE,
 PROCESSING_INSTRUCTION_NODE</td>
 <td valign='top' rowspan='1' colspan='1'><code>nodeValue</code></td>
 </tr>
 <tr>
 <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE,
 DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
 <td valign='top' rowspan='1' colspan='1'><em>null</em></td>
 </tr>
 </table>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler)"><!-- --></A><H3>
setUserData</H3>
<PRE>
public java.lang.Object <B>setUserData</B>(java.lang.String&nbsp;key,
                                    java.lang.Object&nbsp;data,
                                    org.w3c.dom.UserDataHandler&nbsp;handler)</PRE>
<DL>
<DD>Associate an object to a key on this node. The object can later be
 retrieved from this node by calling <code>getUserData</code> with the
 same key.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - The key to associate the object to.<DD><CODE>data</CODE> - The object to associate to the given key, or
                <code>null</code> to remove any existing association to that key.<DD><CODE>handler</CODE> - The handler to associate to that key, or
                <code>null</code>.
<DT><B>Returns:</B><DD>Returns the <code>DOMUserData</code> previously associated to
         the given key on this node, or <code>null</code> if there was none.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getWholeText()"><!-- --></A><H3>
getWholeText</H3>
<PRE>
public java.lang.String <B>getWholeText</B>()</PRE>
<DL>
<DD>Returns all text of <code>Text</code> nodes logically-adjacent text
 nodes to this node, concatenated in document order.
 <br>For instance, in the example below <code>wholeText</code> on the
 <code>Text</code> node that contains "bar" returns "barfoo", while on
 the <code>Text</code> node that contains "foo" it returns "barfoo".
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isElementContentWhitespace()"><!-- --></A><H3>
isElementContentWhitespace</H3>
<PRE>
public boolean <B>isElementContentWhitespace</B>()</PRE>
<DL>
<DD>Returns whether this text node contains <a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character'>
 element content whitespace</a>, often abusively called "ignorable whitespace". The text node is
 determined to contain whitespace in element content during the load
 of the document or if validation occurs while using
 <code>Document.normalizeDocument()</code>.
 <p>
 The Saxon implementation always returns false.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="replaceWholeText(java.lang.String)"><!-- --></A><H3>
replaceWholeText</H3>
<PRE>
public org.w3c.dom.Text <B>replaceWholeText</B>(java.lang.String&nbsp;content)
                                  throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>Replaces the text of the current node and all logically-adjacent text
 nodes with the specified text. All logically-adjacent text nodes are
 removed including the current node unless it was the recipient of the
 replacement text.
 <br>This method returns the node which received the replacement text.
 The returned node is:
 <ul>
 <li><code>null</code>, when the replacement text is
 the empty string;
 </li>
 <li>the current node, except when the current node is
 read-only;
 </li>
 <li> a new <code>Text</code> node of the same type (
 <code>Text</code> or <code>CDATASection</code>) as the current node
 inserted at the location of the replacement.
 </li>
 </ul>
 <br>For instance, in the above example calling
 <code>replaceWholeText</code> on the <code>Text</code> node that
 contains "bar" with "yo" in argument results in the following:
 <br>Where the nodes to be removed are read-only descendants of an
 <code>EntityReference</code>, the <code>EntityReference</code> must
 be removed instead of the read-only nodes. If any
 <code>EntityReference</code> to be removed has descendants that are
 not <code>EntityReference</code>, <code>Text</code>, or
 <code>CDATASection</code> nodes, the <code>replaceWholeText</code>
 method must fail before performing any modification of the document,
 raising a <code>DOMException</code> with the code
 <code>NO_MODIFICATION_ALLOWED_ERR</code>.
 <br>For instance, in the example below calling
 <code>replaceWholeText</code> on the <code>Text</code> node that
 contains "bar" fails, because the <code>EntityReference</code> node
 "ent" contains an <code>Element</code> node which cannot be removed.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>content</CODE> - The content of the replacing <code>Text</code> node.
<DT><B>Returns:</B><DD>The <code>Text</code> node created with the specified content.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if one of the <code>Text</code>
                                  nodes being replaced is readonly.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setIdAttribute(java.lang.String, boolean)"><!-- --></A><H3>
setIdAttribute</H3>
<PRE>
public void <B>setIdAttribute</B>(java.lang.String&nbsp;name,
                           boolean&nbsp;isId)
                    throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>If the parameter <code>isId</code> is <code>true</code>, this method
 declares the specified attribute to be a user-determined ID attribute
 . This affects the value of <code>Attr.isId</code> and the behavior
 of <code>Document.getElementById</code>, but does not change any
 schema that may be in use, in particular this does not affect the
 <code>Attr.schemaTypeInfo</code> of the specified <code>Attr</code>
 node. Use the value <code>false</code> for the parameter
 <code>isId</code> to undeclare an attribute for being a
 user-determined ID attribute.
 <br> To specify an attribute by local name and namespace URI, use the
 <code>setIdAttributeNS</code> method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the attribute.<DD><CODE>isId</CODE> - Whether the attribute is a of type ID.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
                                  <br>NOT_FOUND_ERR: Raised if the specified node is not an attribute
                                  of this element.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setIdAttributeNode(org.w3c.dom.Attr, boolean)"><!-- --></A><H3>
setIdAttributeNode</H3>
<PRE>
public void <B>setIdAttributeNode</B>(org.w3c.dom.Attr&nbsp;idAttr,
                               boolean&nbsp;isId)
                        throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>If the parameter <code>isId</code> is <code>true</code>, this method
 declares the specified attribute to be a user-determined ID attribute
 . This affects the value of <code>Attr.isId</code> and the behavior
 of <code>Document.getElementById</code>, but does not change any
 schema that may be in use, in particular this does not affect the
 <code>Attr.schemaTypeInfo</code> of the specified <code>Attr</code>
 node. Use the value <code>false</code> for the parameter
 <code>isId</code> to undeclare an attribute for being a
 user-determined ID attribute.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>idAttr</CODE> - The attribute node.<DD><CODE>isId</CODE> - Whether the attribute is a of type ID.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
                                  <br>NOT_FOUND_ERR: Raised if the specified node is not an attribute
                                  of this element.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setIdAttributeNS(java.lang.String, java.lang.String, boolean)"><!-- --></A><H3>
setIdAttributeNS</H3>
<PRE>
public void <B>setIdAttributeNS</B>(java.lang.String&nbsp;namespaceURI,
                             java.lang.String&nbsp;localName,
                             boolean&nbsp;isId)
                      throws org.w3c.dom.DOMException</PRE>
<DL>
<DD>If the parameter <code>isId</code> is <code>true</code>, this method
 declares the specified attribute to be a user-determined ID attribute
 . This affects the value of <code>Attr.isId</code> and the behavior
 of <code>Document.getElementById</code>, but does not change any
 schema that may be in use, in particular this does not affect the
 <code>Attr.schemaTypeInfo</code> of the specified <code>Attr</code>
 node. Use the value <code>false</code> for the parameter
 <code>isId</code> to undeclare an attribute for being a
 user-determined ID attribute.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespaceURI</CODE> - The namespace URI of the attribute.<DD><CODE>localName</CODE> - The local name of the attribute.<DD><CODE>isId</CODE> - Whether the attribute is a of type ID.
<DT><B>Throws:</B>
<DD><CODE>org.w3c.dom.DOMException</CODE> - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
                                  <br>NOT_FOUND_ERR: Raised if the specified node is not an attribute
                                  of this element.<DT><B>Since:</B></DT>
  <DD>DOM Level 3</DD>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../../../../com/icl/saxon/om/Axis.html" title="class in com.icl.saxon.om"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AbstractNode.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
